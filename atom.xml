<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[小桑博客]]></title>
  <link href="http://shiren1118.github.com/atom.xml" rel="self"/>
  <link href="http://shiren1118.github.com/"/>
  <updated>2013-03-23T20:25:49+08:00</updated>
  <id>http://shiren1118.github.com/</id>
  <author>
    <name><![CDATA[alfred sang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[about delegete]]></title>
    <link href="http://shiren1118.github.com/blog/2013/03/18/about-delegete/"/>
    <updated>2013-03-18T00:29:00+08:00</updated>
    <id>http://shiren1118.github.com/blog/2013/03/18/about-delegete</id>
    <content type="html"><![CDATA[<p>rootviewcontroller 上增加了一个tableviewcontroller，tablecell里有一个view，view里又有一个button</p>

<p>view大于2层就很难受了，delegate传来传去的。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>view1:
</span><span class='line'>  button - click
</span><span class='line'>      -(void)click_event_callback;
</span><span class='line'>  
</span><span class='line'>tableviewcontroller
</span><span class='line'>  view1.delegate = self;
</span><span class='line'>  
</span><span class='line'>  -(void)click_event_callback;
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>rootviewcontroller
</span><span class='line'>  tableviewcontroller *tbvc.delegate = self;
</span><span class='line'>  
</span><span class='line'>  -(void)click_event_callback;
</span><span class='line'>  </span></code></pre></td></tr></table></div></figure>


<p>这样做的原因是点击button的时候，需要在rootviewcontroller.navagationcontroller中push一个viewcontroller，而tableviewcontroller是没有navagationcontroller的。</p>

<p>我们通常设置delegate</p>

<pre><code>@property(nonatomic,assign,readwrite) id&lt;*Protocol&gt; _delegate;
</code></pre>

<p>用assign是防止产生交替dealloc死锁内存问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[cocos2d-x wiki翻译]Transitions]]></title>
    <link href="http://shiren1118.github.com/blog/2013/03/04/transitions/"/>
    <updated>2013-03-04T16:58:00+08:00</updated>
    <id>http://shiren1118.github.com/blog/2013/03/04/transitions</id>
    <content type="html"><![CDATA[<h2>过渡 (Transitions)</h2>

<h3>介绍Introduction</h3>

<div style='display:none;'>
One of the cool features that Cocos2d-x has to offer is the power of transitions within two different scene. Transitions are effects such as: wipe, fade, zoom, and split. You can use transitions to switch between Cocos2d-x Scene objects. Sceneclass is derived from CocosNode and it is similar to Layer. You can add other CocosNode, such as Layer(s) and Sprite(s) into a Scene.
</div>


<p>Cocos2d-x最爽的一个特性是已经提供了在2个不同场景直接过度能力.过度是效果，如wipe, fade, zoom, 和 split. 你可以使用过度在Cocos2d-x场景对象中切换.Sceneclass继承自CocosNode,它和Layer非常相似.你可以增加其他CocosNode,
如 Layer(s) 和 Sprite(s) 放到场景中.</p>

<div style='display:none;'>
Technically, a transition scene is an scene that performs a transition effect before setting control to the new scene.
</div>


<p>技巧上说,过度场景是可以进行过渡效果，在设置控制到新的场景.</p>

<h3>创建Create transition</h3>

<div style='display:none;'>
Time is the number of seconds for the transition. To apply transition to scenes, the syntax is as follows:
</div>


<p>Time 是过渡的秒数.为了把过渡应用到场景中，语法如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">CCDirector</span><span class="o">::</span><span class="n">sharedDirector</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">replaceScene</span><span class="p">(</span><span class="n">CCTransitionFade</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span><span class="n">newScene</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>




<div style='display:none;'>
Some transitions has custom parameter(s); for example, FadeTransition has the fade color as extra parameter.
static CCTransitionFade* create(float duration,CCScene* scene, const ccColor3B& color);
To enable a transition, it is not much more difficult. Here we have an small example:
</div>


<p>过滤参数可以有自定义参数;例如,FadeTransition有fade color作为额外参数.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">static</span> <span class="n">CCTransitionFade</span><span class="o">*</span> <span class="n">create</span><span class="p">(</span><span class="kt">float</span> <span class="n">duration</span><span class="p">,</span><span class="n">CCScene</span><span class="o">*</span> <span class="n">scene</span><span class="p">,</span> <span class="k">const</span> <span class="n">ccColor3B</span><span class="o">&amp;</span> <span class="n">color</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了确保过渡效果,其实一点不难，这儿有一个小例子:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">CCScene</span> <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="n">SecondPage</span><span class="o">::</span><span class="n">scene</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">CCDirector</span><span class="o">::</span><span class="n">sharedDirector</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">setDepthTest</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">CCTransitionScene</span> <span class="o">*</span><span class="n">transition</span> <span class="o">=</span> <span class="n">CCTransitionPageTurn</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="mf">3.0f</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<div style='display:none;'>
If you run this you will have a “page turn” effect. This is, like turning the page on a paper made book.
</div>


<p>如果运行这段代码，你会看到翻页效果.也就是看起来像一页一页翻书。</p>

<p><img src="http://www.cocos2d-x.org/attachments/download/1623" alt="" /></p>

<h3>更多More transitions</h3>

<div style='display:none;'>
There are many more transition types, you can see the full list in the class reference, in the official Cocos2D-X documentation.
</div>


<p>还有很多过渡类型，你可以参见官方Cocos2D-X文档的类引用的完整列表</p>

<p>Last updated by Zhe Wang at Updated about 1 month ago.</p>

<h3>Comment</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[cocos2d-x wiki翻译]Particles]]></title>
    <link href="http://shiren1118.github.com/blog/2013/03/04/particles/"/>
    <updated>2013-03-04T16:58:00+08:00</updated>
    <id>http://shiren1118.github.com/blog/2013/03/04/particles</id>
    <content type="html"><![CDATA[<h1>粒子(Particles)</h1>

<p>Particles
Introduction
Point vs Quad
CCParticleBatchNode
Creating a Quad Particle System
Gravity vs Radius mode
Gravity Mode
These properties are only valid in Gravity Mode:
Radius Mode
These properties are only valid in Radius Mode:
Properties common to all modes
Common properties of the particles:
Common properties of the system:
Examples
References
Comment</p>

<h2>Introduction</h2>

<p>The term particle system refers to a computer graphics technique that uses a large number of very small sprites or other graphic objects to simulate certain kinds of &#8220;fuzzy&#8221; phenomena, which are otherwise very hard to reproduce with conventional rendering techniques - usually highly chaotic systems, natural phenomena, and/or processes caused by chemical reactions.</p>

<p>Point vs Quad
In early versions of Cocos2d-x, there were two types of particle system in cocos2d-x: Quad and Point particle system:</p>

<p>CCParticleSystemQuad
CCParticleSystemPoint
The CCParticleSystemQuad has these additional features that CCParticleSystemPoint doesn&#8217;t support:</p>

<p>Spinning particles: particles can rotate around its axis. CCParticleSystemPoint ignores this property.
Particles can have any size. In CCParticleSystemPoint if the size is bigger than 64, it will be treated as 64.
The whole system can be scaled using the scale property.
As time goes on，we found that CCParticleSystemPoint is much slower than CCParticleSystemQuad.In addition,CCParticleSystemPoint does not support CCParticleBatchNode. As the result, CCParticleSystemPoint has been removed from cocos2d-x particle system.</p>

<p>CCParticleBatchNode
A CCParticleBatchNode can reference one and only one texture (one image file, one texture atlas). Only the CCParticleSystems that are contained in that texture can be added to the CCSpriteBatchNode. All CCParticleSystems added to a CCSpriteBatchNode are drawn in one OpenGL ES draw call. If the CCParticleSystems are not added to a CCParticleBatchNode then an OpenGL ES draw call will be needed for each one, which is less efficient.</p>

<p>Creating a Quad Particle System
1CCParticleSystemQuad* m_emitter = newCCParticleSystemQuad();
2m_emitter = CCParticleFire::create();</p>

<h2>Gravity vs Radius mode</h2>

<p>Gravity Mode
Gravity Mode lets particles fly toward or away from a center point. Its strength is that it allows very dynamic, organic effects. You can set gravity mode with this line:</p>

<p>1// Gravity Mode
2this->m_nEmitterMode = kCCParticleModeGravity;
3
4// Gravity Mode: gravity
5this->modeA.gravity = ccp(0,-90);</p>

<p>These properties are only valid in Gravity Mode:
gravity (a CGPoint). The gravity of the particle system
speed (a float). The speed at which the particles are emitted
speedVar (a float). The speed variance.
tangencialAccel (a float). The tangential acceleration of the particles.
tangencialAccelVar (a float). The tangential acceleration variance.
radialAccel (a float). The radial acceleration of the particles.
radialAccelVar (a float). The radial acceleration variance.
Radius Mode
Radius Mode causes particles to rotate in a circle. It also allows you to create spiral effects with particles either rushing inward or orating outward. You set radius mode with this line:</p>

<p>1// Radius Mode
2this->m_nEmitterMode = kCCParticleModeRadius;
3
4// Radius Mode: startRadius
5this->modeB.startRadius = 0;
6this->modeB.startRadiusVar = 0;//ccp(0,0);</p>

<p>These properties are only valid in Radius Mode:
startRadius (a float). The starting radius of the particles
startRadiusVar (a float). The starting radius variance
endRadius (a float). The ending radius of the particles.
endRadiusVar (a float). The ending radius variance
rotatePerSecond (a float). Number of degress to rotate a particle around the source pos per second.
rotatePerSecondVar (a float). Number of degrees variance.
Properties common to all modes</p>

<h2>Common properties of the particles:</h2>

<p>startSize: Start size of the particles in pixels
startSizeVar
endSize: Use kCCParticleStartSizeEqualToEndSize if you want that the start size == end size.
endSizeVar
startColor (a ccColor4F)
startColorVar (a ccColor4F)
endColor (a ccColor4F)
endColorVar (a ccColor4F)
startSpin. Only used in CCParticleSystemQuad
startSpinVar. Only used in CCParticleSystemQuad
endSpin. Only used in CCParticleSystemQuad
endSpinVar. Only used in CCParticleSystemQuad
life: time to live of the particles in seconds
lifeVar:
angle: (a float). Starting degrees of the particle
angleVar
positon: (a CGPoint)
posVar
centerOfGravity (a CGPoint)
Common properties of the system:
emissionRate (a float). How many particle are emitted per second
duration (a float). How many seconds does the particle system (different than the life property) lives. Use kCCParticleDurationInfinity for infity.
blendFunc (a ccBlendFunc). The OpenGL blending function used for the system
positionType (a tCCPositionType). Use kCCPositionTypeFree (default one) for moving particles freely. Or use kCCPositionTypeGrouped to move them in a group.
texture (a CCTexture2D). The texture used for the particles</p>

<h2>Examples</h2>

<p>cocos2d-x comes with some predefined particles that can be customized in runtime. List of predefined particles:</p>

<p>CCParticleFire: Point particle system. Uses Gravity mode.
CCParticleFireworks: Point particle system. Uses Gravity mode.
CCParticleSun: Point particle system. Uses Gravity mode.
CCParticleGalaxy: Point particle system. Uses Gravity mode.
CCParticleFlower: Point particle system. Uses Gravity mode.
CCParticleMeteor: Point particle system. Uses Gravity mode.
CCParticleSpiral: Point particle system. Uses Gravity mode.
CCParticleExplosion: Point particle system. Uses Gravity mode.
CCParticleSmoke: Point particle system. Uses Gravity mode.
CCParticleSnow: Point particle system. Uses Gravity mode.
CCParticleRain: Point particle system. Uses Gravity mode.
References
Particle
Particle System in cocos2d</p>

<p>Last updated by Iven Yang at Updated about 1 month ago.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[cocos2d-x wiki翻译]Effects]]></title>
    <link href="http://shiren1118.github.com/blog/2013/03/04/effects/"/>
    <updated>2013-03-04T16:58:00+08:00</updated>
    <id>http://shiren1118.github.com/blog/2013/03/04/effects</id>
    <content type="html"><![CDATA[<h1>Effects</h1>

<h2>介绍</h2>

<div style='display:none;'>
Effects are a special kind of action. Instead of modifying normal properties like opacity, position, rotation, or scale, they modify a new kind of property: the grid property.
</div>


<p>Effects是特殊类型的action.与修改常规的属性如透明度,位置,旋转或缩放等不同,它们修改的是一种新类型的属性:grid属性.</p>

<div style='display:none;'>
A grid property is like a matrix, it is a network of lines that cross each other to form a series of squares or rectangles.
</div>


<p>grid属性像是一个模型,是一个线条交叉的网格,具体表现是一系列的正方形或长方形.</p>

<div style='display:none;'>
These special actions render any CocosNode object (Layer, Scene, Sprite, etc.) into the grid, and you can transform the grid by moving its vertices.
</div>


<p>这些特殊的actions可以渲染任一CocosNode对象 (Layer, Scene, Sprite, 等.)到grid中，你可以通过顶点来转换grid.</p>

<div style='display:none;'>
There are 2 kind of grids: tiled grids and non-tiled grids. The difference is that the tiled grid is composed of individual tiles while the non-tiled grid is composed of vertices.
</div>


<p>一共有2类grid: 布局grid和非布局grid.它们的区别在于布局grid是由独立的布局组成，而非布局grid由顶点组成。</p>

<p><img src="http://www.cocos2d-x.org/attachments/1575/tiled_and_nontiled_grid.png" alt="" /></p>

<div style='display:none;'>
The following is an example of Ripple3D action, who uses a Grid3D (non-tiled) grid:
</div>


<p></p>

<p>下面是Ripple3D action例子，它使用的是 Grid3D (非布局的) grid:</p>

<p><img src="http://www.cocos2d-x.org/attachments/1577/effect_ripple3d_grid.png" alt="" /></p>

<div style='display:none;'>
and the following is an example of FadeOutTR action, who uses a TiledGrid3D (tiled) grid:
</div>


<p></p>

<p>接下来是FadeOutTR action例子，它用的是TiledGrid3D (布局) grid:</p>

<p><img src="http://www.cocos2d-x.org/attachments/1578/effect_fadeouttiles.png" alt="" /></p>

<h2>用法  How do I use them ?</h2>

<div style='display:none;'>
Like any other action, it is executed by the runAction. eg:
</div>


<p>和其他action一样,是通过runAction执行的.例如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// Create an sprite</span>
</span><span class='line'><span class="n">CCSprite</span><span class="o">*</span> <span class="n">grossini</span> <span class="o">=</span> <span class="n">CCSprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;grossini.png&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">grossini</span><span class="o">-&gt;</span><span class="n">runAction</span><span class="p">(</span><span class="n">CCLiquid</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="n">ccg</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">),</span> <span class="mi">5</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>




<div style='display:none;'>
Liquid, like any other grid action, receives the grid parameter. You can adjust the quality of the effect by increasing the size of the grid. But it also implies less FPS.
The Effects are IntervalAction actions so you can treat them like any other action. eg:
</div>


<p>和其他grid action一样，Liquid会接收一个grid参数.你可以通过使用增加grid大小来调整effoect(效果)的质量.但是它也意味着有很少的FPS.
Effects是IntervalAction actions,所以你可以用像其他action的处理方式一样来处理它们.例如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// create a Lens3D action</span>
</span><span class='line'><span class="n">CCActionInterval</span><span class="o">*</span> <span class="n">lens</span> <span class="o">=</span> <span class="n">CCLens3D</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">ccp</span><span class="p">(</span><span class="mi">240</span><span class="p">,</span><span class="mi">160</span><span class="p">),</span><span class="mi">240</span><span class="p">,</span><span class="n">ccg</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">10</span><span class="p">),</span><span class="mi">8</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// create a Waved3D action</span>
</span><span class='line'><span class="n">CCActionInterval</span><span class="o">*</span> <span class="n">waves</span> <span class="o">=</span> <span class="n">CCWaves3D</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span><span class="mi">80</span><span class="p">,</span><span class="n">ccg</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">10</span><span class="p">),</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// create a sequence an repeat it forever</span>
</span><span class='line'><span class="n">grossini</span><span class="o">-&gt;</span><span class="n">runAction</span><span class="p">(</span><span class="n">CCRepeatForever</span><span class="o">::</span><span class="n">create</span><span class="p">((</span><span class="n">CCSequence</span><span class="o">*</span><span class="p">)</span><span class="n">CCSequence</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">waves</span><span class="p">,</span> <span class="n">lens</span><span class="p">,</span> <span class="nb">NULL</span> <span class="p">)</span> <span class="p">)</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<div style='display:none;'>
The following is the list of the available Grid3D (non-tiled) actions in v2.1.0:
</div>


<p>下面是v2.1.0版本中Grid3D(non-tiled) actions的可用列表:</p>

<p>Shaky3D     Waves3D     FlipX3D     FlipY3D</p>

<p><tr>
<td> <img src="http://www.cocos2d-x.org/attachments/1580/IMG_0001.PNG" alt="">      </td>
<td>   <img src="http://www.cocos2d-x.org/attachments/1581/IMG_0002.PNG" alt="">         </td>
<td>   <img src="http://www.cocos2d-x.org/attachments/1582/IMG_0003.PNG" alt="">         </td>
<td>   <img src="http://www.cocos2d-x.org/attachments/1583/IMG_0004.PNG" alt="">         </td>
</tr></p>

<p>Lens3D      Liquid      Waves   Twirl</p>

<p><tr>
<td> <img src="http://www.cocos2d-x.org/attachments/1584/IMG_0005.PNG" alt="">      </td>
<td>   <img src="http://www.cocos2d-x.org/attachments/1585/IMG_0007.PNG" alt="">         </td>
<td>   <img src="http://www.cocos2d-x.org/attachments/1586/IMG_0008.PNG" alt="">         </td>
<td>   <img src="http://www.cocos2d-x.org/attachments/1587/IMG_0011.PNG" alt="">         </td>
</tr></p>

<p>Ripple3D</p>

<p><img src="http://www.cocos2d-x.org/attachments/1588/IMG_0002_2.PNG" alt="" /></p>

<div style='display:none;'>
The following is the list of the available TiledGrid3D (tiled) actions
</div>


<p>下面是TiledGrid3D(tiled) actions可用的列表:</p>

<p>ShakyTiles3D   &#8212;&#8212;&#8212;        ShatteredTiles3D   &#8212;&#8212;&#8212;        ShuffleTiles &#8212;&#8212;&#8212;      FadeOutTRTiles</p>

<p><tr>
<td> <img src="http://www.cocos2d-x.org/attachments/1593/IMG_0012.PNG" alt="">       </td>
<td>   <img src="http://www.cocos2d-x.org/attachments/1594/IMG_0013.PNG" alt="">          </td>
<td>   <img src="http://www.cocos2d-x.org/attachments/1595/IMG_0014.PNG" alt="">          </td>
<td>   <img src="http://www.cocos2d-x.org/attachments/1596/IMG_0015.PNG" alt="">          </td>
</tr></p>

<p>FadeOutBLTiles &#8212;&#8212;&#8212;    FadeOutUpTiles   &#8212;&#8212;&#8212;      FadeOutDownTiles   &#8212;&#8212;&#8212;        TurnOffTiles</p>

<p><tr>
<td> <img src="http://www.cocos2d-x.org/attachments/1597/IMG_0016.PNG" alt="">      </td>
<td>   <img src="http://www.cocos2d-x.org/attachments/1598/IMG_0017.PNG" alt="">         </td>
<td>   <img src="http://www.cocos2d-x.org/attachments/1599/IMG_0019.PNG" alt="">         </td>
<td>   <img src="http://www.cocos2d-x.org/attachments/1600/IMG_0020.PNG" alt="">         </td>
</tr></p>

<p>WavesTiles3D  &#8212;&#8212;&#8212;         JumpTiles3D   &#8212;&#8212;&#8212;         SplitRows &#8212;&#8212;&#8212;         SplitCols</p>

<p><tr>
<td> <img src="http://www.cocos2d-x.org/attachments/1601/IMG_0021.PNG" alt="">      </td>
<td>   <img src="http://www.cocos2d-x.org/attachments/1602/IMG_0022.PNG" alt="">         </td>
<td>   <img src="http://www.cocos2d-x.org/attachments/1603/IMG_0023.PNG" alt="">         </td>
<td>   <img src="http://www.cocos2d-x.org/attachments/1604/IMG_0024.PNG" alt="">         </td>
</tr></p>

<h2>参考</h2>

<p>cocos2d-iphone <a href="http://www.cocos2d-iphone.org/archives/40">cocos2d’s effects简介</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[cocos2d-x wiki翻译]Skeletal animation]]></title>
    <link href="http://shiren1118.github.com/blog/2013/03/04/skeletal-animation/"/>
    <updated>2013-03-04T16:57:00+08:00</updated>
    <id>http://shiren1118.github.com/blog/2013/03/04/skeletal-animation</id>
    <content type="html"><![CDATA[<p>Skeletal animation
Skeletal animation
Skeletal animation vs. Sprite sheets
Skeletal animation introduce
Tool for skeleton animation
Working with cocosbuilder Animations
Adding Keyframes
Editing Keyframes
Importing a Sequence of Images
Applying Easing
Using Multiple Timelines
Chaining Timelines
Playing Back Animations in Code
Conclusion
References
Comment</p>

<h3>Skeletal animation vs. Sprite sheets</h3>

<p>You can creat animations using &#8220;sprite sheets&#8221; which is quick and easy. Until you realize your game needs lots of animations and the memory consumption goes way up, together with the time required to load all the data. Also, to limit the size, you need to limit yourself to a low FPS for the animation, which also means the animation doesn’t look as smooth as you’d like. This is where skeletal animation comes in.</p>

<h3>Skeletal animation introduce</h3>

<p>Skeletal animation is a technique in cocos2d-x animation in which a character is represented in two parts: a surface representation used to draw the character (called skin or mesh) and a hierarchical set of interconnected bones (called the skeleton or rig) used to animate (pose and keyframe) the mesh.</p>

<p><img src="http://www.cocos2d-x.org/attachments/1606/Skeletal-Animation.jpg" alt="" /></p>

<p>Cocos2d-x provides a way to have 2d skeletal animations in your applications. The process of skeletal animation may be a bit complicated to setup, but using them afterwards is easy, and there are some tools to simplify the process.</p>

<p>When using skeletal animation, the animation is composed of several bones which are connected to one another. Affecting a bone also affects all of its children. By composing different transformations on each bone, you obtain different poses for the skeleton.</p>

<p>Now, if you define keyframes with certain transformations for a point in time for each of the bones in the skeleton, you can interpolate between the keyframes to obtain a smooth transition and thus animate the skeleton.</p>

<p>In the attached code, I used a class named Transformation, which contains data about 2D transformations, like translation, rotation and scale. Then, a Keyframe is defined by a frame number and one such Transformation. A collection of Keyframes defines a KeyframeAnimation. Finally, a SkeletonAnimation is a collection of KeyframeAnimations, one for each bone in the skeleton.</p>

<p>Separately, you use a Skeleton, which keeps a list of Joints that define the hierarchy of bones in the skeleton. Different from &#8220;sprite sheets&#8221;,each bone is then assigned a certain texture, like the ones below:</p>

<p><img src="http://www.cocos2d-x.org/attachments/1607/animated-grossini.png" alt="" /></p>

<h3>Tool for skeleton animation</h3>

<p>So far as we know, CocosBuilder is a great, free (MIT license) tool for creating skeleton animations.
CocosBuilder is built for Cocos2d’s Javascript bindings, which means that your code, animations, and interfaces will run unmodified in Cocos2d-x.
A tutorial for cocos2d-iphone can be found at the <a href="http://code.zynga.com/2012/10/creating-a-game-with-cocosbuilder/">Zynga Engineering blog</a></p>

<h3>Working with cocosbuilder Animations</h3>

<p>You can use <a href="http://cocosbuilder.com/">CocosBuilder</a> for creating character animations, animating complete scenes or just about any animation you can imagine. The animation editor has full support for multiple resolutions, easing between keyframes, boned animations and multiple timelines to name a few of the features.</p>

<p>h3.The Basics</p>

<p>In the bottom of the main window you can find the timeline. You use the timeline to create your animations.</p>

<p><img src="http://www.cocos2d-x.org/attachments/1610/timeline.png" alt="" /></p>

<p>By default your ccb-file has a single timeline that is 10 seconds long. CocosBuilder edits animations at a frame rate of 30 frames per second, but when you play back the animation in your app it will use whatever you have set cocos2d to use (the default in cocos2d is 60 fps). The current time is displayed in the top right corner, and has the format minute:second:frame. The blue vertical line also shows the current time. Click the time display to change the duration of the current timeline.</p>

<h4>Adding Keyframes</h4>

<p>Animations in CocosBuilder are keyframe based. You can add keyframes to different properties of a node and CocosBuilder will automatically interpolate between the keyframes, optionally with different types of easing.</p>

<p>To add a keyframe, first expand the view of the node by clicking the triangle to the right of the name of the node. This will reveal all the animatable properties of the node. What can be animated varies slightly depending on what type of node you have selected. Once the properties are visible you can click the property in the timeline with the option key held down. This will create a new keyframe at the time of the click. Alternatively, you can create a new keyframe at the time of the time marker by selecting a node then choosing Insert Keyframe in the Animation menu.</p>

<p>Keyframes are automatically added at the current time if you transform a node in the canvas area, given that the transformed property already has one or more keyframes in the timeline.</p>

<h4>Editing Keyframes</h4>

<p>You edit a specific keyframe of a node by moving the time marker to the time of the keyframe and selecting the node. You can focus on a keyframe by double clicking it (which will select the node and move the time marker).</p>

<p>You can select keyframes and move them together by dragging a selection box around them. You can also copy and paste keyframes between nodes. Make sure you only have one selected node when pasting the keyframes. The keyframes will be pasted starting at the time of the time marker.</p>

<p>If you have selected a set of keyframes it is possible to reverse the order of them by selecting Reverse Selected Keyframes in the Animation menu. Use the Stretch Selected Keyframes… option to speed up or slow down an animation by a scaling factor.</p>

<h4>Importing a Sequence of Images</h4>

<p>If you have an animation created by sprite frames it can be tedious to move each individual frame to the timeline. CocosBuilder simplifies this process by automatically importing a sequence of images. Select the frames that you want to import in the left hand project view, then select a CCSprite in the timeline. Now choose Create Frames from Selected Resources in the Animation menu. The frames will automatically be created at the start of the marker. If you need to slow down the animation, select the newly created keyframes and use the Stretch Selected Keyframes… command.</p>

<h4>Applying Easing</h4>

<p>CocosBuilder offers a carefully selected subset of the easings provided by cocos2d. To apply an easing right click between two keyframes and select the type of easing that you want to apply.</p>

<p><img src="http://www.cocos2d-x.org/attachments/1611/keyframes.png" alt="" /></p>

<p>Some of the easings have additional options, after the easing has been applied you can right click again and select Easing Setting… from the popup menu.</p>

<h4>Using Multiple Timelines</h4>

<p>A very powerful feature of CocosBuilder&#8217;s animation editor is the ability to have multiple timelines in a single file. You can name the different sequences and play them back from your code by using their name. It&#8217;s even possible to smoothly transition between the different timelines.</p>

<p>To select, add or edit your timelines use the timeline popup menu:</p>

<p><img src="http://www.cocos2d-x.org/attachments/1612/Multiple%20Timelines.png" alt="" /></p>

<p>In the edit timelines dialog you can get an overview of your timelines, rename them, add new ones and (optionally) set one of the timelines to automatically start playback directly when the ccbi-file is loaded by your app.</p>

<p><img src="http://www.cocos2d-x.org/attachments/1613/autoStart.png" alt="" /></p>

<p>Properties in timelines that do not have keyframes set share their values across timelines. E.g. if you move one node in one timeline it will be moved in all timelines as long as they do not have a keyframe set for the position property. I can sometimes be useful to add a single keyframe to a property just to override the shared value for a specific timeline.</p>

<h4>Chaining Timelines</h4>

<p>You can automatically play back a sequence of timelines by chaining them. You can also use this feature for automatically looping a timeline.</p>

<p><img src="http://www.cocos2d-x.org/attachments/1614/autoPlayback.png" alt="" /></p>

<p>To have a timeline play in sequence, click the No chained timeline text and select the timeline you want to play right after the current one.</p>

<h4>Playing Back Animations in Code</h4>

<p>To programmatically control the animations you create with CocosBuilder you will need to retrieve theCCBAnimationManager. The animation manager will be assigned to the nodes userObject when the ccbi-file is loaded.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="mi">1</span><span class="n">CCNode</span> <span class="o">*</span><span class="n">myNodeGraph</span> <span class="o">=</span> <span class="n">ccbReader</span><span class="o">-&gt;</span><span class="n">readNodeGraphFromFile</span><span class="p">(</span><span class="s">&quot;myFile.ccbi&quot;</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The action manager will be returned as an autoreleased object. To play back a specific timeline call therunAnimationsForSequenceNamed: method. If a timeline is currently playing it will be immediately stopped when calling this method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="mi">1</span><span class="n">animationManager</span><span class="o">-&gt;</span><span class="n">runAnimationsForSequenceNamed</span><span class="p">(</span><span class="s">&quot;My Timeline&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Optionally, you can use a tween duration to smoothly transition to the new timeline. Where possible linear interpolations will be used for the transition.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="mi">1</span><span class="n">animationManager</span><span class="o">-&gt;</span><span class="n">runAnimationsForSequenceNamedTweenDuration</span><span class="p">(</span><span class="s">&quot;My Timeline&quot;</span><span class="p">,</span><span class="mf">0.5f</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is also possible to receive a callback whenever a timeline has finished playing. You will receive these callbacks even if another timeline is chained in sequence. Use the CCBAnimationManagerDelegate to receive the callbacks.</p>

<h3>Conclusion</h3>

<p>Thank you taking the time to read through the tutorial and happy coding!If you have other tools for skeleton animation,please let us known or post to this wiki.</p>

<h3>References</h3>

<p><a href="http://code.zynga.com/2012/10/creating-a-game-with-cocosbuilder/">Creating a game with cocosbuilder</a>
<a href="http://cocosbuilder.com/">CocosBuilder Documentation</a></p>

<h3>Comment</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[cocos2d-x wiki翻译]Scheduler and Timer Callback]]></title>
    <link href="http://shiren1118.github.com/blog/2013/03/04/scheduler-and-timer-callback/"/>
    <updated>2013-03-04T16:57:00+08:00</updated>
    <id>http://shiren1118.github.com/blog/2013/03/04/scheduler-and-timer-callback</id>
    <content type="html"><![CDATA[<h2>Scheduler and Timer Callback</h2>

<div style='display:none;'>
Scheduler is responsible for triggering the scheduled callbacks.
</div>


<p>调度器负责触发调度回调.</p>

<h3>Two different types of callbacks (selectors):</h3>

<div style='display:none;'>
update selector: the &#8216;update&#8217; selector will be called every frame. You can customize the priority.
custom selector: A custom selector will be called every frame, or with a custom interval of time.
The &#8216;custom selectors&#8217; should be avoided when possible. It is faster, and consumes less memory to use the &#8216;update selector&#8217;.
</div>


<p>更新selector:  &#8216;update&#8217; selector可以在每个frame调用.你可以自定义优先级.
自定义selector: 自定义selector可以在每个frame调用, 或自定义的时间段内调用.
&#8216;custom selectors&#8217;尽可能避免使用. 相对于使用&#8217;update selector&#8217;来说，它比较快，且内存消耗较小.</p>

<h3>CCScheduler vs. NSTimer</h3>

<div style='display:none;'>
The Cocos2D Scheduler provides your game with timed events and calls. You should not use NSTimer. Instead use CCScheduler class.

The reasons as follow:
</div>


<p>Cocos2D Scheduler 为你的游戏提供了时间时间和调用.你不要使用NSTimer.而不是用CCScheduler类.</p>

<p>原因如下:</p>

<div style='display:none;'>
CCNode objects know how to schedule and unschedule events,and using the Cocos2D Scheduler has several distinct advantages over just using NSTimer.
</div>


<p>CCNode对象知道如何去调度和解除调度事件，和仅使用NSTimer相比，使用Cocos2D Scheduler有很多不一样的优点.</p>

<ul>
<li>The scheduler calls get deactivated whenever the CCNode is no longer visible or is removed from the scene.</li>
<li>The scheduler calls are also deactivated when Cocos2D is paused and are rescheduled when Cocos2D is resumed.</li>
<li>The scheduler delivers a interval time of the milliseconds that have passed since the last call.This interval time is useful in Physics engines.</li>
<li>Using scheduler with this->scheduleUpdate(); call ensures that your update function will be called before each frame needs to be rendered.</li>
</ul>


<div style='display:none;'>
Accordingly,CCScheduler can save you a lot of time over NSTimer and let you focus on the mechanics of your game.
</div>


<p>因此，CCScheduler会比NSTimer节省很多时间，让你更加关注于你的游戏构成.</p>

<p>Last updated by Iven Yang at Updated about 1 month ago.</p>

<h3>Comment</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[cocos2d-x wiki翻译]Animations]]></title>
    <link href="http://shiren1118.github.com/blog/2013/03/04/animations/"/>
    <updated>2013-03-04T16:57:00+08:00</updated>
    <id>http://shiren1118.github.com/blog/2013/03/04/animations</id>
    <content type="html"><![CDATA[<h2>动画(Animations)</h2>

<p>Animations
Manual Animation
Sprite Sheet Animation
Creating from .png and .plist file
File animation
Skeleton Animation
Comment</p>

<h3>Manual Animation</h3>

<div style='display:none;'>
You can create an animation from a series of image file, like this:
</div>


<p>你可以通过多个图片文件来创建一个动画，比如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'> <span class="n">CCAnimation</span> <span class="o">*</span><span class="n">animation</span> <span class="o">=</span> <span class="n">CCAnimation</span><span class="o">::</span><span class="n">create</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'> <span class="c1">// load image file from local file system to CCSpriteFrame, then add into CCAnimation</span>
</span><span class='line'> <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">15</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'>     <span class="kt">char</span> <span class="n">szImageFileName</span><span class="p">[</span><span class="mi">128</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span><span class='line'>     <span class="n">sprintf</span><span class="p">(</span><span class="n">szImageFileName</span><span class="p">,</span> <span class="s">&quot;Images/grossini_dance_%02d.png&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>     <span class="n">animation</span><span class="o">-&gt;</span><span class="n">addSpriteFrameWithFileName</span><span class="p">(</span><span class="n">szImageFileName</span><span class="p">);</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">animation</span><span class="o">-&gt;</span><span class="n">setDelayPerUnit</span><span class="p">(</span><span class="mf">2.8f</span> <span class="o">/</span> <span class="mf">14.0f</span><span class="p">);</span> <span class="c1">// This animation contains 14 frames, will continuous 2.8 seconds.</span>
</span><span class='line'><span class="n">animation</span><span class="o">-&gt;</span><span class="n">setRestoreOriginalFrame</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span> <span class="c1">// Return to the 1st frame after the 14th frame is played. </span>
</span><span class='line'>
</span><span class='line'><span class="n">CCAnimate</span> <span class="o">*</span><span class="n">action</span> <span class="o">=</span> <span class="n">CCAnimate</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">animation</span><span class="p">);</span>
</span><span class='line'><span class="n">sprite</span><span class="o">-&gt;</span><span class="n">runAction</span><span class="p">(</span><span class="n">action</span><span class="p">);</span>  <span class="c1">// run action on sprite object</span>
</span></code></pre></td></tr></table></div></figure>


<div style='display:none;'>
Note that CCAnimation is composed by sprite frames, delay time per frame, durations etc, it&#8217;s a pack of &#8220;data&#8221;. While CCAnimate is an action, which is created base on CCAnimation object.
</div>


<p>注意CCAnimation是通过sprite frames组成的，每个frame延时，持续等，它是一组&#8221;数据&#8221;.
而CCAnimate是一个action，它是基于CCAnimation对象创建的。</p>

<h3>Sprite Sheet Animation</h3>

<div style='display:none;'>
Although manual animation is very easy to understand, it&#8217;s rarely used in real game projects. Instead, sprite sheet animation is the common solution of 2D animations.
</div>


<p>尽管manual animation是非常易于理解的,但事实上，它在真实游戏项目中是非常少用到的.相反，sprite sheet animation是2D动画中最常见的解决方案.</p>

<div style='display:none;'>
This is a typical sprite sheet. It can be a sequence of sprite frames for an animation, or can be images pack that will be used in a same scene.
</div>


<p>下面是一个典型的sprite sheet.它是动画中的一连串sprite frames，或者是可以在一个场景中用到的一组图片.</p>

<p><img src="http://www.cocos2d-x.org/attachments/download/1570" alt="" /></p>

<div style='display:none;'>
In OpenGL ES 1.1 period, sprite sheets was widely used for these benefits:
Reduce times of file I/O. Loading a big sprite sheet file is faster than loading lots of small files.
Reduce the memory consumption. OpenGL ES 1.1 can only use power-of-two sized textures (that is a width or height of 2,4,864,128,256,512,1024,&#8230;). In other words, OpenGL ES 1.1 allocates power-of-two sized memory for each texture even if this texture has smaller width and height. So using packed sprite sheet image will reduce the fragments of memory.
</div>


<p>在OpenGL ES 1.1时代，sprite sheets被广泛使用是得益于:</p>

<ul>
<li>减少文件I/O时间.加载一个大的sprite sheet文件比加载多个小文件要快得多.</li>
<li>减少内存消耗.OpenGL ES 1.1仅可用 power-of-two sized textures（这事一个 2,4,864,128,256,512,1024,&#8230;的宽高）.换言之，如果宽高比较小的话，OpenGL ES 1.1甚至为每个texture分配power-of-two sized内存.所以使用成组的 sprite sheet图片会减少内存碎片</li>
</ul>


<div style='display:none;'>
Reduce the draw calls to OpenGL ES draw method and speed up rendering.
Cocos2d-x v2.0 upgraded to OpenGL ES 2.0 based. OpenGL ES 2.0 doesn&#8217;t allocate power-of-two memory block for textures anymore, but the benefit of reducing file I/O times and draw calls are still working.
</div>


<p>减少 OpenGL ES 调用方法绘制，加速渲染.
Cocos2d-x v2.0已更新，是基于OpenGL ES 2.0的.OpenGL ES 2.0不会为textures分配power-of-two内存块，但减少文件系统I/O时间和调用的好处仍然是有效的.</p>

<div style='display:none;'>
Then how about the animation? As we can see, sprite sheet has no MUST-BE relationship with animations. But considering to these benefits above, sprite sheet animations are efficient. There&#8217;re different ways to create sprite sheet animations in cocos2d.
</div>


<p>那该如何动画呢？正如我们看到的，sprite sheet没有使用动画的必然关系.但考虑到上面这些益处，sprite sheet是有效的.在cocos2d中有很多种不同的方法来创建sprite sheet.</p>

<h4>Creating from .png and .plist file</h4>

<div style='display:none;'>
In cocos2d-x 0.x and 1.x versions, CCSpriteSheet works for this purpose. While CCSpriteBatchNode is a replacement of CCSpriteSheet since v2.0
</div>


<p>在cocos2d-x 0.x和1.x版本中，CCSpriteSheet便是为此目的而生的.而CCSpriteBatchNode在v2.0版本之后替换了CCSpriteSheet</p>

<div style='display:none;'>
A CCSpriteBatchNode object contains the actual image texture of all the sprite frames. You must add it to a scene, even though it won&#8217;t draw anything itself; it just needs to be there so that it is part of the rendering pipeline. For example:
</div>


<p>CCSpriteBatchNode对象包含了所有sprite frames中的用到的真实图片texture.你必须把它放到场景中，甚至它自身什么都不用画;它只需要放到那里，这样它就成了rendering pipeline的组成部分.比如:</p>

<div style='display:none;'>
1CCSpriteBatchNode* spritebatch = CCSpriteBatchNode::create(&#8220;animations/grossini.png&#8221;);
Next, you need to use the CCSpriteFrameCache singleton to keep track how frame names correspond to frame bounds – that is, what rectangular area of the sprite sheet. Example:
</div>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">CCSpriteBatchNode</span><span class="o">*</span> <span class="n">spritebatch</span> <span class="o">=</span> <span class="n">CCSpriteBatchNode</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;animations/grossini.png&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来，你需要使用CCSpriteFrameCache单例对象来保存frame名字如何响应到frame bounds=
也就是，sprite sheet中的矩形区域.例如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">CCSpriteFrameCache</span><span class="o">*</span> <span class="n">cache</span> <span class="o">=</span> <span class="n">CCSpriteFrameCache</span><span class="o">::</span><span class="n">sharedSpriteFrameCache</span><span class="p">();</span>
</span><span class='line'><span class="n">cache</span><span class="o">-&gt;</span><span class="n">addSpriteFramesWithFile</span><span class="p">(</span><span class="s">&quot;animations/grossini.plist&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<div style='display:none;'>
Once your sprite sheet and frames are loaded, and the sprite sheet has been added to the scene, you can create sprites that use these frames by using the “createWithSpriteFrameName” method, and adding it as a child of the sprite sheet:
</div>


<p>一旦你的sprite sheet和frames已经加载完毕，并且sprite sheet已经增加到场景中了，你可以通过这些frames创建sprites，使用 “createWithSpriteFrameName” 方法，把它放入作为sprite sheet的子对象:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">m_pSprite1</span> <span class="o">=</span> <span class="n">CCSprite</span><span class="o">::</span><span class="n">createWithSpriteFrameName</span><span class="p">(</span><span class="s">&quot;grossini_dance_01.png&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">spritebatch</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">m_pSprite1</span><span class="p">);</span>
</span><span class='line'><span class="n">addChild</span><span class="p">(</span><span class="n">spritebatch</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<div style='display:none;'>
createWithSpriteFrameName method will find the corresponding coordinates and rectangle from grossini.plist, then &#8220;clip&#8221; the texture grossini.png to a sprite frame.
</div>


<p>createWithSpriteFrameName方法会查找响应坐标和grossini.plist中定义的矩形，因此&#8221;clip&#8221;texture grossini.png是sprite frame.</p>

<div style='display:none;'>
Now we need to create a CCArray object and add all frames of the animation to it. In the case of this animation, we know all 14 frames have the same size, so we can use a nested loop to iterate through them all, and break the loop when we finish adding the 14th frame.
</div>


<p>现在，我们需要创建CCArray对象，增加所有动画的frames到此对象中。在这个动画例子中，我们知道这14个frame都有一模一样的尺寸,所以我们使用了嵌套循环来迭代，当我们完成增加第14个frame的时候中断循环.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">CCArray</span><span class="o">*</span> <span class="n">animFrames</span> <span class="o">=</span> <span class="n">CCArray</span><span class="o">::</span><span class="n">createWithCapacity</span><span class="p">(</span><span class="mi">15</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">char</span> <span class="n">str</span><span class="p">[</span><span class="mi">100</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">15</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">sprintf</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="s">&quot;grossini_dance_%02d.png&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CCSpriteFrame</span><span class="o">*</span> <span class="n">frame</span> <span class="o">=</span> <span class="n">cache</span><span class="o">-&gt;</span><span class="n">spriteFrameByName</span><span class="p">(</span> <span class="n">str</span> <span class="p">);</span>
</span><span class='line'>    <span class="n">animFrames</span><span class="o">-&gt;</span><span class="n">addObject</span><span class="p">(</span><span class="n">frame</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<div style='display:none;'>
Finally, we need to create a CCAnimate action instance which we can run on the CCSprite. Below, we also wrap the CCAnimate action in a CCRepeatForever action that does what you would expect: repeats the animation forever,like so:
</div>


<p>最后，我们需要创建CCAnimate action实例，我们要运行在CCSprite的对像.
下面，我们也封装CCAnimate action到CCRepeatForever action中，此actions是你所需要的:重复动画,像这样:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">CCAnimation</span><span class="o">*</span> <span class="n">animation</span> <span class="o">=</span> <span class="n">CCAnimation</span><span class="o">::</span><span class="n">createWithSpriteFrames</span><span class="p">(</span><span class="n">animFrames</span><span class="p">,</span> <span class="mf">0.3f</span><span class="p">);</span>
</span><span class='line'><span class="n">m_pSprite1</span><span class="o">-&gt;</span><span class="n">runAction</span><span class="p">(</span> <span class="n">CCRepeatForever</span><span class="o">::</span><span class="n">create</span><span class="p">(</span> <span class="n">CCAnimate</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">animation</span><span class="p">)</span> <span class="p">)</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>File animation</h4>

<div style='display:none;'>
CCAnimationCache can load a xml/plist file which well describes the batch node, sprite frame names and their rectangles. The interfaces are much easier to use.
</div>


<p>CCAnimationCache 可以加载xml/plist文件，此文件可以非常好的描述批量node,sprite frame names和它们的矩形.
这个接口更简单易用.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">CCAnimationCache</span> <span class="o">*</span><span class="n">cache</span> <span class="o">=</span> <span class="n">CCAnimationCache</span><span class="o">::</span><span class="n">sharedAnimationCache</span><span class="p">();</span> <span class="c1">// &quot;caches&quot; are always singletons in cocos2d</span>
</span><span class='line'><span class="n">cache</span><span class="o">-&gt;</span><span class="n">addAnimationsWithFile</span><span class="p">(</span><span class="s">&quot;animations/animations-2.plist&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">CCAnimation</span> <span class="n">animation</span> <span class="o">=</span> <span class="n">cache</span><span class="o">-&gt;</span><span class="n">animationByName</span><span class="p">(</span><span class="s">&quot;dance_1&quot;</span><span class="p">);</span>  <span class="c1">// I apologize for this method name, it should be getAnimationByName(..) in future versions</span>
</span><span class='line'><span class="n">CCAnimate</span> <span class="n">animate</span> <span class="o">=</span> <span class="n">CCAnimate</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">animation</span><span class="p">);</span>  <span class="c1">// Don&#39;t confused between CCAnimation and CCAnimate :)</span>
</span><span class='line'><span class="n">sprite</span><span class="o">-&gt;</span><span class="n">runAction</span><span class="p">(</span><span class="n">animate</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<div style='display:none;'>
Easy to use, isn&#8217;t it?
</div>


<p>简单易用吧？哈哈</p>

<h3>骨骼动画(Skeleton Animation)</h3>

<p>请参考 <a href="http://www.cocos2d-x.org/projects/cocos2d-x/wiki/Skeletal_Animation">Skeletal Animation</a> 页.</p>

<h3>Coment</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[cocos2d-x wiki翻译]Actions]]></title>
    <link href="http://shiren1118.github.com/blog/2013/03/04/actions/"/>
    <updated>2013-03-04T16:57:00+08:00</updated>
    <id>http://shiren1118.github.com/blog/2013/03/04/actions</id>
    <content type="html"><![CDATA[<h2>Actions</h2>

<div style='display:none;'>
Actions are like orders given to any CCNode object. These actions usually modify some of the object&#8217;s attributes like position, rotation, scale, etc. If these attributes are modified during a period of time, they are CCIntervalAction actions, otherwise they are CCInstantAction actions.
For example, the CCMoveBy action modifies the position property during a period of time, hence, it is a subclass of CCIntervalAction.
</div>


<p>Actions are like orders given to any CCNode object. These actions usually modify some of the object&#8217;s attributes like position, rotation, scale, etc. If these attributes are modified during a period of time, they are CCIntervalAction actions, otherwise they are CCInstantAction actions.
For example, the CCMoveBy action modifies the position property during a period of time, hence, it is a subclass of CCIntervalAction.</p>

<p>Actions are like orders given to any CCNode object. 这些actions通常会修改对象的一些属性，如位置，旋转，缩放等。如果这些熟悉在一段时间内被修改，它们是CCIntervalAction actions，相反则是 CCInstantAction actions.</p>

<p>例如，CCMoveBy action是在一段时间内修改了位置属性，因此，它是CCIntervalAction的子类.</p>

<div style='display:none;'>
You can run TestCpp -> Actions Test to see the actions&#8217; visual effects. And cocos2d-x/samples/Cpp/TestCpp/Classes/ActionsTest, ActionsEaseTest are good sample codes for the usage.
</div>


<p>你可以运行TestCpp -> Actions Test 来查看actions的可视化效果。cocos2d-x/samples/Cpp/TestCpp/Classes/ActionsTest, ActionsEaseTest 是非常好的实例代码用法。</p>

<p>例如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// Move a sprite 50 pixels to the right, and 10 pixels to the top over 2 seconds.</span>
</span><span class='line'><span class="n">CCActionInterval</span><span class="o">*</span>  <span class="n">actionBy</span> <span class="o">=</span> <span class="n">CCMoveBy</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">ccp</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span><span class="mi">10</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>




<div style='display:none;'>
The CCIntervalAction actions have some interesting properties:
They can be accelerated using the time-altered actions
</div>


<p>CCIntervalAction actions有一些有意思的属性:</p>

<p>它们可以在时间切换action中被访问到：</p>

<ul>
<li>CCEaseIn</li>
<li>CCEaseOut</li>
<li>CCEaseInOut</li>
<li>CCSpeed</li>
</ul>


<div style='display:none;'>
Etc. (See the ActionsEaseTest.cpp example for more info)
</div>


<p>等. (更多信息，详见ActionsEaseTest.cpp实例)</p>

<div style='display:none;'>
You can pause/resume all actions by using the CCActionManager:
</div>


<p>你可以通过用CCActionManager来暂停和恢复所有actions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// Pause actions</span>
</span><span class='line'><span class="n">CCDirector</span> <span class="o">*</span><span class="n">director</span> <span class="o">=</span> <span class="n">CCDirector</span><span class="o">::</span><span class="n">sharedDirector</span><span class="p">();</span>
</span><span class='line'><span class="n">m_pPausedTargets</span> <span class="o">=</span> <span class="n">director</span><span class="o">-&gt;</span><span class="n">getActionManager</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">pauseAllRunningActions</span><span class="p">();</span>
</span><span class='line'><span class="c1">// resume actions</span>
</span><span class='line'><span class="n">CCDirector</span> <span class="o">*</span><span class="n">director</span> <span class="o">=</span> <span class="n">CCDirector</span><span class="o">::</span><span class="n">sharedDirector</span><span class="p">();</span>
</span><span class='line'><span class="n">director</span><span class="o">-&gt;</span><span class="n">getActionManager</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">resumeTargets</span><span class="p">(</span><span class="n">m_pPausedTargets</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Basic Actions</h3>

<div style='display:none;'>
Basic actions are the ones that modify basic properties like:
</div>


<p>基本actions是指修改基本属性如:</p>

<h4>位置(position)</h4>

<ul>
<li><a href="http://www.cocos2d-x.org/reference/native-cpp/dc/df6/classcocos2d_1_1_c_c_move_by.html">CCMoveBy</a></li>
<li><a href="http://www.cocos2d-x.org/reference/native-cpp/d2/d2b/classcocos2d_1_1_c_c_move_to.html">CCMoveTo</a></li>
<li><a href="http://www.cocos2d-x.org/reference/native-cpp/db/d25/classcocos2d_1_1_c_c_jump_by.html">CCJumpBy</a></li>
<li><a href="http://www.cocos2d-x.org/reference/native-cpp/d2/d6c/classcocos2d_1_1_c_c_jump_to.html">CCJumpTo</a></li>
<li><a href="http://www.cocos2d-x.org/reference/native-cpp/df/d33/classcocos2d_1_1_c_c_bezier_by.html">CCBezierBy</a></li>
<li><a href="http://www.cocos2d-x.org/reference/native-cpp/dc/d17/classcocos2d_1_1_c_c_bezier_to.html">CCBezierTo</a></li>
<li><a href="http://www.cocos2d-x.org/reference/native-cpp/de/dbf/classcocos2d_1_1_c_c_place.html">CCPlace</a></li>
</ul>


<h4>缩放(scale)</h4>

<ul>
<li><a href="http://www.cocos2d-x.org/reference/native-cpp/d4/d62/classcocos2d_1_1_c_c_scale_by.html">CCScaleBy</a></li>
<li><a href="http://www.cocos2d-x.org/reference/native-cpp/da/d23/classcocos2d_1_1_c_c_scale_to.html">CCScaleTo</a></li>
</ul>


<h4>旋转(rotation)</h4>

<ul>
<li><a href="http://www.cocos2d-x.org/reference/native-cpp/d6/d57/classcocos2d_1_1_c_c_rotate_by.html">CCRotateBy</a></li>
<li><a href="http://www.cocos2d-x.org/reference/native-cpp/d9/df5/classcocos2d_1_1_c_c_rotate_to.html">CCRotateTo</a></li>
</ul>


<h4>可见性(visible)</h4>

<ul>
<li><a href="http://www.cocos2d-x.org/reference/native-cpp/d3/de8/classcocos2d_1_1_c_c_show.html">CCShow</a></li>
<li><a href="http://www.cocos2d-x.org/reference/native-cpp/d1/d72/classcocos2d_1_1_c_c_hide.html">CCHide</a></li>
<li><a href="http://www.cocos2d-x.org/reference/native-cpp/d8/de2/classcocos2d_1_1_c_c_blink.html">CCBlink</a></li>
<li><a href="http://www.cocos2d-x.org/reference/native-cpp/dc/d90/classcocos2d_1_1_c_c_toggle_visibility.html">CCToggleVisibility</a></li>
</ul>


<h4>透明度(opacity)</h4>

<ul>
<li><a href="http://www.cocos2d-x.org/reference/native-cpp/d7/d89/classcocos2d_1_1_c_c_fade_in.html">CCFadeIn</a></li>
<li><a href="http://www.cocos2d-x.org/reference/native-cpp/d6/d6d/classcocos2d_1_1_c_c_fade_out.html">CCFadeOut</a></li>
<li><a href="http://www.cocos2d-x.org/reference/native-cpp/da/d44/classcocos2d_1_1_c_c_fade_to.html">CCFadeTo</a></li>
</ul>


<h4>颜色(color)</h4>

<ul>
<li><a href="http://www.cocos2d-x.org/reference/native-cpp/de/de1/classcocos2d_1_1_c_c_tint_by.html">CCTintBy</a></li>
<li><a href="http://www.cocos2d-x.org/reference/native-cpp/dd/dfa/classcocos2d_1_1_c_c_tint_to.html">CCTintTo</a></li>
</ul>


<p>例如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">CCSprite</span> <span class="o">*</span><span class="n">sprite</span> <span class="o">=</span> <span class="n">CCSprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;Images/grossini.png&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">sprite</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">ccp</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">));</span>
</span><span class='line'><span class="n">addChild</span><span class="p">(</span><span class="n">sprite</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">CCMoveBy</span><span class="o">*</span> <span class="n">act1</span> <span class="o">=</span> <span class="n">CCMoveBy</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">ccp</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>
</span><span class='line'><span class="n">sprite</span><span class="o">-&gt;</span><span class="n">runAction</span><span class="p">(</span><span class="n">CCRepeat</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">act1</span><span class="p">,</span> <span class="mi">1</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>




<div style='display:none;'>
The act1 will be a CCMoveBy action of duration 0.5, but with the position value of ccp(100,0).
</div>


<p>act1是持续0.5秒的CCMoveBy action,并且使用位置ccp(100,0)的值？.</p>

<h3>Comment</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[cocos2d-x wiki翻译]Coordinate System(ok)]]></title>
    <link href="http://shiren1118.github.com/blog/2013/03/03/coordinate-system/"/>
    <updated>2013-03-03T17:05:00+08:00</updated>
    <id>http://shiren1118.github.com/blog/2013/03/03/coordinate-system</id>
    <content type="html"><![CDATA[<p>Coordinate System·坐标系</p>

<ul>
<li>Introduction of Different Coordinate Systems

<ul>
<li>Cartesian Coordinate System</li>
<li>UI Coordinate System</li>
<li>Direct3D Coordinate System</li>
<li>OpenGL and Cocos2d Coordinate System</li>
</ul>
</li>
<li>Parent and Childrens</li>
<li>Anchor Point</li>
<li>getVisibleSize, getVisibleOrigin vs getWinSize</li>
<li>How to convert co-ordinates

<ul>
<li>convertToNodeSpace：</li>
<li>convertToWorldSpace：</li>
<li>convertToWorldSpaceAR，</li>
<li>Sample code：</li>
</ul>
</li>
<li>References</li>
<li>Comment</li>
</ul>


<div style='display:none;'>
## Cartesian Coordinate System
</div>


<h2>笛卡尔坐标系</h2>

<div style='display:none;'>
### Introduction of Different Coordinate Systems·
</div>


<h3>不同坐标系简介</h3>

<div style='display:none;'>
#### Cartesian Coordinate System·
</div>


<h4>笛卡尔坐标系</h4>

<div style='display:none;'>
You probably have known &#8220;Cartesian Coordinate System&#8221; from school where it&#8217;s heavily used in geometry lessons. If you have forgotten, these image will remind you quickly:
</div>


<p>你可能上学的时候就已经知道“笛卡尔坐标系”了，它在几何课本里经常用到。如果你已经忘得差不多了，下面这些图片可以很快唤起你的记忆：</p>

<p><img src="http://www.cocos2d-x.org/attachments/download/1561" alt="" /></p>

<div style='display:none;'>
There&#8217;re 3 types of coordinate system that you will meet in mobile games development.
</div>


<p>在移动游戏开发过程中，有三种类型的坐标系你可能遇到：</p>

<div style='display:none;'>
#### UI Coordinate System·
</div>


<h4>UI坐标系</h4>

<div style='display:none;'>
 In common UI Coordinates on iOS/Android/Windows SDK:

- The origin (x=0, y=0) is at the top-left corner.
- X axis starts at the left side of the screen and increase to the right;
- Y coordinates start at the top of the screen and increase downward,
</div>


<p>iOS/Android/Windows SDK中的通用UI坐标系：</p>

<ul>
<li>起点坐标(x=0, y=0)位于左上角</li>
<li>X轴从屏幕最左边开始，由左向右渐增</li>
<li>Y轴坐标从屏幕最上方开始，由上向下渐增</li>
</ul>


<div style='display:none;'>
looks like this
</div>


<p>详见下图</p>

<p><img src="http://www.cocos2d-x.org/attachments/download/1564" alt="" /></p>

<div style='display:none;'>
    #### Direct3D Coordinate System·
</div>


<p></p>

<h4>Direct3D坐标系</h4>

<div style='display:none;'>
DirectX uses Left-handed Cartesian Coordinate.
</div>


<p>DirectX 使用Left-handed Cartesian Coordinate</p>

<div style='display:none;'>
    #### OpenGL and Cocos2d Coordinate System
</div>


<h4>OpenGL和Cocos2d坐标系</h4>

<div style='display:none;'>
Cocos2d-x/-html5/-iphone uses the same coordinate system as OpenGL, which is so called &#8220;Right-handed Cartesian Coordinate System&#8221;.
</div>


<p>Cocos2d-x/-html5/-iphone使用的坐标系和OpenGL的坐标系一样，名为“Right-handed Cartesian Coordinate Syste”。</p>

<p><img src="http://www.cocos2d-x.org/attachments/download/1563" alt="" /></p>

<div style='display:none;'>
We only use x-axis & y-axis in 2D world. So in your cocos2d games:

- The origin (x=0, y=0) is in the bottom-left corner of screen, which means the screen is in the first quartile of right-handed cartesian coordinate system,
- X axis starts at the left side of the screen and increase to the right;
- Y axis starts at the bottom of the screen and increase upwards.
</div>


<p>在2D世界中，我们仅会使用x轴和y轴。所以在你的cocos2d游戏中：</p>

<ul>
<li>起点坐标(x=0, y=0)位于右下角，这意味着屏幕位于</li>
<li>X轴从屏幕最左边开始，由左向右渐增</li>
<li>Y轴坐标从屏幕最下方开始，由下向上渐增</li>
</ul>


<div style='display:none;'>
And here’s a picture that helps illustrate Cocos2d-x Coordinates a bit better:
</div>


<p>下面这张图片有助于更好的阐述Cocos2d-x坐标：</p>

<p><img src="http://www.cocos2d-x.org/attachments/1556/SpriteCoordinates.jpg" alt="" /></p>

<div style='display:none;'>
Note that it&#8217;s different from common UI coordinate systems and DirectX coordinate systems.
</div>


<p>一定要注意：通用UI坐标系和DirectX坐标系是不一样的。</p>

<h3>Parent and Childrens</h3>

<div style='display:none;'>
Every class derived from CCNode (Ultimate cocos2d-x class) will have a anchorPoint property.
When determining where to draw the object (sprite, layer, whatever), cocos2d-x will combine both properties position and anchorPoint. Also, when rotating an object, cocos2d-x will rotate it around its anchorPoint.
</div>


<p>由于每个类都继承自CCNode（cocos2d-x的最顶层类），所以每个类都会默认有anchorPoint属性。
当我们在一个位置画一个的对象的时候，cocos2d-x会合并属性位置和anchorPoint。当然，当旋转一个对象时，cocos2d-x会围绕绕anchorPoint旋转的。</p>

<div style='display:none;'>
We create a sprite as a gray parent and another sprite as blue child.Set parent&#8217;s position to ccp(100,100),child&#8217;s anchor point in the center of circle .
</div>


<p>我们创建一个灰色父对象和一个蓝色子对象。设置父对象位置是ccp(100,100),子对象的anchor point位于圆心。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">CCSprite</span><span class="o">*</span> <span class="n">parent</span> <span class="o">=</span> <span class="n">CCSprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;parent.png&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">parent</span><span class="o">-&gt;</span><span class="n">setAnchorPoint</span><span class="p">(</span><span class="n">ccp</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span><span class="c1">// Anchor Point</span>
</span><span class='line'><span class="n">parent</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">ccp</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">));</span>
</span><span class='line'><span class="n">parent</span><span class="o">-&gt;</span><span class="n">setAnchorPoint</span><span class="p">(</span><span class="n">ccp</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>
</span><span class='line'><span class="n">addChild</span><span class="p">(</span><span class="n">parent</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//create child </span>
</span><span class='line'><span class="n">CCSprite</span><span class="o">*</span> <span class="n">child</span> <span class="o">=</span> <span class="n">CCSprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;child.png&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">child</span><span class="o">-&gt;</span><span class="n">setAnchorPoint</span><span class="p">(</span><span class="n">ccp</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">));</span>
</span><span class='line'><span class="n">child</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">ccp</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>
</span><span class='line'><span class="n">parent</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">child</span><span class="p">);</span><span class="c1">//add child sprite into parent sprite.</span>
</span></code></pre></td></tr></table></div></figure>




<div style='display:none;'>
Although we set child&#8217;s position of ccp(0,0),parent&#8217;s position is ccp(100,100).Therefore,child&#8217;s position is :
</div>


<p>由于我们设置子对象的位置是ccp(0,0)，父对象位置是ccp(100,100)。所以，子对象位置是：</p>

<p>![](http://www.cocos2d-x.org/attachments/1559/parent.jpeg）</p>

<div style='display:none;'>
### Anchor Point·
</div>


<h3>锚点</h3>

<div style='display:none;'>
As a example, this sprite has an anchorPoint of ccp(0,0) and a position of ccp(0,0). 
</div>


<p>作为例子，下面这个精灵有的锚点位于 ccp(0,0)，位置位于ccp(0,0)。</p>

<p><img src="http://www.cocos2d-x.org/attachments/1545/bottomleft.png" alt="" /></p>

<div style='display:none;'>
This rectangle sprite will be placed at the bottom left corner of its parent, the layer.

example:
</div>


<p>这个矩形精灵将被放到它的父对象（layer）的左下角。</p>

<p>示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// create sprite</span>
</span><span class='line'><span class="n">CCSprite</span><span class="o">*</span> <span class="n">sprite</span> <span class="o">=</span> <span class="n">CCSprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;bottomleft.png&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">sprite</span><span class="o">-&gt;</span><span class="n">setAnchorPoint</span><span class="p">(</span><span class="n">ccp</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span><span class="c1">// Anchor Point</span>
</span><span class='line'><span class="n">sprite</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">ccp</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span>
</span><span class='line'><span class="n">addChild</span><span class="p">(</span><span class="n">sprite</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://www.cocos2d-x.org/attachments/1557/anchor_left.png" alt="" /></p>

<div style='display:none;'>
In another example, we will assign a anchorPoint of ccp(0.5,0.5) to better understand the relative value of the anchor point.
</div>


<p>在另一个例子中，我们会摆放一个坐标为ccp(0.5,0.5)的anchorPoint，以便您更好的理解锚点的相对值。</p>

<p><img src="http://www.cocos2d-x.org/attachments/1546/center.png" alt="" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// create sprite</span>
</span><span class='line'><span class="n">CCSprite</span><span class="o">*</span> <span class="n">sprite</span> <span class="o">=</span> <span class="n">CCSprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;center.png&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">sprite</span><span class="o">-&gt;</span><span class="n">setAnchorPoint</span><span class="p">(</span><span class="n">ccp</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">));</span><span class="c1">// Anchor Point</span>
</span><span class='line'><span class="n">sprite</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">ccp</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span>
</span><span class='line'><span class="n">addChild</span><span class="p">(</span><span class="n">sprite</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://www.cocos2d-x.org/attachments/1553/anchor_center.png" alt="" /></p>

<div style='display:none;'>
As you can see in the image, the anchor point is not a pixel value. The value of X and Y are relative to the size of the node.
</div>


<p>正如你从图中看出的，锚点取的不是像素值，此值的X和Y是相对于此节点的大小的。</p>

<div style='display:none;'>
### getVisibleSize, getVisibleOrigin vs getWinSize
</div>


<h3>获取可视区域大小, 获取可视区域起点 vs 获取窗口大小</h3>

<ul>
<li>获取可视区域大小, http://www.proxyee.com/sohu.php?u=g6QXlZ4DNWBAxCi9G6VfFZDcGz9wRSMxPcWDz6pirP7qxzcikzUMuwFBVm%2BmUfs%2F%2Bggq3kMo%2Fb%2FjyNLgzuR7KoJwBHGwiTD8HSw9yZSdW%2FifzOs%3D&amp;b=3#a7cc45ff42a969700f878bb2485adf3b1</li>
<li>获取可视区域起点 http://www.proxyee.com/sohu.php?u=g6QXlZ4DNWBAxCi9G6VfFZDcGz9wRSMxPcWDz6pirP7qxzcikzUMuwFBVm%2BmUfs%2F%2Bggq3kMo%2Fb%2FjyNLgzuR7KoJwBHGwiTD8HSw9yZSdW%2FifzOs%3D&amp;b=3#af991a412cb6621bf25ec655a95deddaa</li>
<li>获取窗口大小 http://www.proxyee.com/sohu.php?u=g6QXlZ4DNWBAxCi9G6VfFZDcGz9wRSMxPcWDz6pirP7qxzcikzUMuwFBVm%2BmUfs%2F%2Bggq3kMo%2Fb%2FjyNLgzuR7KoJwBHGwiTD8HSw9yZSdW%2FifzOs%3D&amp;b=3#aa78f85a3666553d0d4fe73118e0c82ac</li>
</ul>


<div style='display:none;'>
VisibleSize returns visible size of the OpenGL view in points.The value is equal to getWinSize if don&#8217;t invoke CCEGLView::setDesignResolutionSize().
getVisibleOrigin returns visible origin of the OpenGL view in points. Please refer to [Multi resolution support](Multi resolution support) for more details
</div>


<p>VisibleSize（可视区域大小）会返回此点的OpenGL视图的可视区域大小。如果没有调用CCEGLView::setDesignResolutionSize()的话，此值等于getWinSize的大小。
getVisibleOrigin（获取可视区域起点）会返回此点的OpenGL视图的可视区域起点。请移步<a href="Multi%20resolution%20support">Multi resolution support</a>查看详情。</p>

<div style='display:none;'>
### How to convert co-ordinates·
</div>


<h3>如何转换坐标</h3>

<h4>convertToNodeSpace：</h4>

<div style='display:none;'>
convertToNodeSpace will be used in, for example, tile-based games, where you have a big map. convertToNodeSpace will convert your openGL touch co-ordinates to the co-ordinates of the .tmx map or anything similar.

Example:

The following picture shows that we have node1 with anchor point (0,0) and node2 with anchor point (1,1).

We invoke CCPoint point = node1->convertToNodeSpace(node2->getPosition()); convert node2&#8217;s SCREEN coords to node1&#8217;s local.As the result,node2 with the position of (-25，-60).
</div>


<p>举例，convertToNodeSpace用于tile-based的游戏，即有一个大地图。convertToNodeSpace会转换openGL触摸点转成.tmx 地图或者其他近似的坐标。</p>

<p>例子：</p>

<p>下面的图片会展现，node1的锚点(0,0)，node2的锚点是(1,1)。</p>

<p>我们会调用CCPoint point = node1->convertToNodeSpace(node2->getPosition()); 转换node2的屏幕坐标为node1的位置。结果是，node2的位置是(-25，-60).</p>

<p><img src="http://www.cocos2d-x.org/attachments/download/1783" alt="" /></p>

<h4>convertToWorldSpace：</h4>

<div style='display:none;'>
convertToWorldSpace(const CCPoint& nodePoint) converts on-node coords to SCREEN coordinates.convertToWorldSpace will always return SCREEN position of our sprite, might be very useful if you want to capture taps on your sprite but need to move/scale your layer

Example:
</div>


<p>convertToWorldSpace(常量 CCPoint&amp; nodePoint) 转换node坐标为SCREEN坐标。convertToWorldSpace会经常返回你的精灵的SCREEN位置，如果你想捕获精灵的taps而且需要移动/缩放layer的时候，这可能非常有帮助。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">CCPoint</span> <span class="n">point</span> <span class="o">=</span> <span class="n">node1</span><span class="o">-&gt;</span><span class="n">convertToWorldSpace</span><span class="p">(</span><span class="n">node2</span><span class="o">-&gt;</span><span class="n">getPosition</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>




<div style='display:none;'>
the above code will convert the node2‘s coordinates to the coordinates on the screen.

For example if the position of node2 is (0, 0) which will be the bottom left corner of the node1, but not necessarily on the screen. This will convert (0, 0) of the node2 to the position of the screen(in this case is (15,20)). The result shows in the following picture:
</div>


<p>上面的代码会转换node2坐标为node2在屏幕上对应的坐标。</p>

<p><img src="http://www.cocos2d-x.org/attachments/download/1784" alt="" /></p>

<h4>convertToWorldSpaceAR</h4>

<div style='display:none;'>
convertToWorldSpaceAR will return the position relatevely to anchor point: so if our scene - root layer has Anchor Point of ccp(0.5f, 0.5f) - default, convertToWorldSpaceAR should return position relatively to screen center.

convertToNodeSpaceAR - the same logic as for .convertToWorldSpaceAR
</div>


<p>convertToWorldSpaceAR返回相对锚点的位置：所以如果你的场景 - 根layer有一个锚点位于ccp(0.5f, 0.5f)。- 默认的，convertToNodeSpaceAR应返回相对于屏幕中心的位置。</p>

<p>convertToNodeSpaceAR - 和convertToWorldSpaceAR是一样的逻辑。</p>

<h4>示例代码：</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">CCSprite</span> <span class="o">*</span><span class="n">sprite1</span> <span class="o">=</span> <span class="n">CCSprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;CloseNormal.png&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">sprite1</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">ccp</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span><span class="mi">40</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="n">sprite1</span><span class="o">-&gt;</span><span class="n">setAnchorPoint</span><span class="p">(</span><span class="n">ccp</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">sprite1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">CCSprite</span> <span class="o">*</span><span class="n">sprite2</span> <span class="o">=</span> <span class="n">CCSprite</span><span class="o">::</span><span class="n">cteate</span><span class="p">(</span><span class="s">&quot;CloseNormal.png&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">sprite2</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">ccp</span><span class="p">(</span><span class="o">-</span><span class="mi">5</span><span class="p">,</span><span class="o">-</span><span class="mi">20</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="n">sprite2</span><span class="o">-&gt;</span><span class="n">setAnchorPoint</span><span class="p">(</span><span class="n">ccp</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">sprite2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">CCPoint</span> <span class="n">point1</span> <span class="o">=</span> <span class="n">sprite1</span><span class="o">-&gt;</span><span class="n">convertToNodeSpace</span><span class="p">(</span><span class="n">sprite2</span><span class="o">-&gt;</span><span class="n">getPosition</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="n">CCPoint</span> <span class="n">point2</span> <span class="o">=</span> <span class="n">sprite1</span><span class="o">-&gt;</span><span class="n">convertToWorldSpace</span><span class="p">(</span><span class="n">sprite2</span><span class="o">-&gt;</span><span class="n">getPosition</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="n">CCPoint</span> <span class="n">point3</span> <span class="o">=</span> <span class="n">sprite1</span><span class="o">-&gt;</span><span class="n">convertToNodeSpaceAR</span><span class="p">(</span><span class="n">sprite2</span><span class="o">-&gt;</span><span class="n">getPosition</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="n">CCPoint</span> <span class="n">point4</span> <span class="o">=</span> <span class="n">sprite1</span><span class="o">-&gt;</span><span class="n">convertToWorldSpaceAR</span><span class="p">(</span><span class="n">sprite2</span><span class="o">-&gt;</span><span class="n">getPosition</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="n">CCLog</span><span class="p">(</span><span class="s">&quot;position = (%f,%f)&quot;</span><span class="p">,</span><span class="n">point1</span><span class="p">.</span><span class="n">x</span><span class="p">,</span><span class="n">point1</span><span class="p">.</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">CCLog</span><span class="p">(</span><span class="s">&quot;position = (%f,%f)&quot;</span><span class="p">,</span><span class="n">point2</span><span class="p">.</span><span class="n">x</span><span class="p">,</span><span class="n">point2</span><span class="p">.</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">CCLog</span><span class="p">(</span><span class="s">&quot;position = (%f,%f)&quot;</span><span class="p">,</span><span class="n">point3</span><span class="p">.</span><span class="n">x</span><span class="p">,</span><span class="n">point3</span><span class="p">.</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">CCLog</span><span class="p">(</span><span class="s">&quot;position = (%f,%f)&quot;</span><span class="p">,</span><span class="n">point4</span><span class="p">.</span><span class="n">x</span><span class="p">,</span><span class="n">point4</span><span class="p">.</span><span class="n">y</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>结果：</p>

<pre><code>position = (-25.000000,-60.000000)
position = (15.000000,20.000000)
position = (-25.000000,-60.000000)
position = (15.000000,20.000000)
</code></pre>

<h3>参考</h3>

<ul>
<li><a href="http://www.proxyee.com/sohu.php?u=g6QXj5oQdS1CziS8RrIdC8qdCjcyGDw%2FddSIjqVu4eLqwSd7gXEBrx4ZQSLtUL8yoQQ2kFI5rOC0n5Thgs13A8ABXxv6%2BDXmHzE%3D&amp;b=3">Coordinate Systems (Direct3D 9) Windows</a> from Microsoft MSDN</li>
<li><a href="http://www.proxyee.com/sohu.php?u=g6QXlZ4DNXFO3jCrR6UXH9LaCjBxVCk6d4TTk%2BZv7OemxzF5m3kErlwPH37gWLw1sEYvz1g08LWtwMC%2Fz5Y9HMdHSk28tTvmXS1zyY6bGuKCwOs%3D&amp;b=3">How to make a simple iphone game with cocos2d tutorial</a> written by Ray Wenderlich</li>
<li>如何使用cocos2d制作一个简单的iphone游戏</li>
<li><a href="http://www.proxyee.com/sohu.php?u=g6QXgIUbfC0ekXTgSq4fQsTZDwcrWGk1NNiBjrpz4uTi0HFmxilb%2BUheBDy7Bf1r7Fl3hgNjq%2BW0npn9&amp;b=3">Coordinate Systems of cocos2dx</a></li>
<li>cocos2dx坐标系</li>
</ul>


<h3>Comment</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[cocos2d-x wiki翻译]Director Scene Layer and Sprite(ok)]]></title>
    <link href="http://shiren1118.github.com/blog/2013/03/01/director-scene-layer-and-sprite/"/>
    <updated>2013-03-01T16:22:00+08:00</updated>
    <id>http://shiren1118.github.com/blog/2013/03/01/director-scene-layer-and-sprite</id>
    <content type="html"><![CDATA[<h2>Director Scene Layer and Sprite</h2>

<h3>Director Scene Layer and Sprite</h3>

<ul>
<li>Scenes</li>
<li>Director</li>
<li>Layers</li>
<li>Multiple Layers Example:</li>
<li>Sprites</li>
<li>References</li>
<li>Comment</li>
</ul>


<h3>Scenes·场景</h3>

<div style='display:none'>
A scene (implemented with the CCScene object) is more or less an independent piece of the app workflow. Some people may call them “screens” or “stages”. Your app can have many scenes, but only one of them is active at a given time.
</div>


<p>场景是app工作流中一个独立的的部分。人们常常称呼它们为 “screens”或“stages”。你的app可能有很多场景，但每次你只能显示（激活）它们中的一个。</p>

<div style='display:none'>
For example, you could have a game with the following scenes: Intro, Menu, Level 1, Cutscene 1, Level 2, Winning cutscene, losing cutscene, High scores screen.
</div>


<p>比如，某个游戏有如下场景：介绍，菜单，Level 1, 画面1, Level 2, 获胜画面, 失败画面, 最高记录screen等.</p>

<div style='display:none'>
You can define every one of these scenes more or less as separate apps; there is a bit of glue between them containing the logic for connecting scenes (the intro goes to the menu when interrupted or finishing, Level 1 can lead you to the cutscene 1 if finished or to the losing cutscene if you lose, etc.).
</div>


<p>你可以定义场景为独立应用部分，通过它们包含的逻辑或连接场景(当中断或完成的时候，介绍界面会跳到菜单。如果完成，Level 1会引到你进入画面1，如果失败，Level 1会进入失败画面，等等.)将它们有机的组装起来。</p>

<div style='display:none'>
    -Cutscene 画面剪辑
</div>


<p><img src="http://www.cocos2d-x.org/attachments/1591/scenes650x144.png" alt="" /></p>

<div style='display:none'>
A cocos2d CCScene is composed of one or more layers (implemented with the CCLayer object), all of them piled up. Layers give the scene an appearance and behavior; the normal use case is to just make instances of Scene with the layers that you want.
</div>


<p>cocos2d CCScene是由一个或多个layer（通过CCLayer对象实现的）组合，堆砌而成。Layers给了场景外观和行为；常规用法是通过你想要的layers来产生场景实例。</p>

<div style='display:none'>
There is also a family of CCScene classes called transitions (implemented with the CCTransitionScene object) which allow you to make transitions between two scenes (fade out/in, slide from a side, etc).
</div>


<p>当然，CCScene家族类中也有被成为转换类（通过CCTransitionScene对象实现），它允许你在2个场景中切换（ 淡出/淡入，slide动画，等待）。</p>

<div style='display:none'>
Since scenes are subclasses of CCNode, they can be transformed manually or by using actions. See Actions for more detail about actions.
</div>


<p>由于场景都是CCNode的子类，所以可以手动或者通过actions方式来改变它们，详见actions部分。</p>

<div style='display:none'>
- See more at: http://www.cocos2d-x.org/projects/cocos2d-x/wiki/Director_Scene_Layer_and_Sprite#sthash.jF0fVw56.dpuf
</div>


<h3>Director·导演类</h3>

<div style='display:none'>
The CCDirector is the component which takes care of going back and forth between scenes.
</div>


<p>CCDirector是控制场景之间进出的组件。</p>

<div style='display:none'>
The CCDirector is a shared (singleton) object. It knows which scene is currently active, and it handles a stack of scenes to allow things like “scene calls” (pausing a Scene and putting it on hold while another enters, and then returning to the original). The CCDirector is the one who will actually change the CCScene, after a CCLayer has asked for push, replacement or end of the current scene.
</div>


<p>CCDirector是共享（单例）对象。它知道当前哪个场景正在显示，并且它处理 场景栈 来让 比如场景调用（暂停场景和稍待片刻进入其他入口，之后返回起始点）。</p>

<p>CCDirector是实际改变对象的那个，在CCLayer被询问是否入栈之后，替换或者终止当前场景的控制者。</p>

<div style='display:none'>
The CCDirector is also responsible for initializing OpenGL ES.
</div>


<p>CCDirector也可以通过初始化OpenGL ES来响应。</p>

<div style='display:none'>
- See more at: http://www.cocos2d-x.org/projects/cocos2d-x/wiki/Director_Scene_Layer_and_Sprite#sthash.jF0fVw56.dpuf
</div>


<h3>Layers·层</h3>

<div style='display:none'>
A CCLayer has a size of the whole drawable area, and knows how to draw itself. It can be semi transparent (having holes and/or partial transparency in some/all places), allowing to see other layers behind it. Layers are the ones defining appearance and behavior, so most of your programming time will be spent coding CCLayer subclasses that do what you need.
</div>


<p>CCLayer有 全部可画区域的尺寸，并且知道如何去绘图。它可以半拉式渐变（），让你 去看其他位于它下方的层。Layers是定义外观和行为的，所以在你的大部分编程时间都将花费在CCLayer子类做你需要做的事情上。</p>

<p><img src="http://www.cocos2d-x.org/attachments/1592/layers.png" alt="" /></p>

<div style='display:none'>
The CCLayer is where you define event handlers. Events are propagated to layers (from front to back) until some layer catches the event and accepts it.
</div>


<p>CCLayer是你定义事件处理的地方，事件会被传播到layer上（从前到后，冒泡），直到某个layer捕获此事件并接受它为止。</p>

<div style='display:none'>
Although some serious apps will require you to define custom CCLayer classes, cocos2d provides a library of useful predefined layers (a simple menu layer: CCMenu, a color layer: CCColorLayer, a multiplexor between other layers: CCMultiplexLayer, and more ).
</div>


<p>尽管一些apps会需要你去个性化定义CCLayer类，cocos2d还是提供了一个非常有用的内置预先定义好的layers（简单的菜单layer：如CCMenu，颜色layer：如CCColorLayer，在层之间多路传送的layer：如CCMultiplexLayer，等等）的类库。</p>

<div style='display:none'>
Layers can contain CCSprite objects, CCLabel objects and even other CCLayer objects as children.
</div>


<p>Layers可以包含CCSprite对象，CCLabel对象，甚至是CCLayer子对象。</p>

<div style='display:none'>
Since layers are subclass of CCNode, they can be transformed manually or by using actions. See Actions for more detail about actions.
</div>


<p>由于layers都是CCNode的子类，所以可以手动或者通过actions方式来改变它们，详见actions部分。</p>

<p><strong>Multiple Layers Example</strong>:</p>

<pre><code>CCLayerGradient* layer1 = CCLayerGradient::create(ccc4(255, 0, 0, 255), ccc4(255, 0, 255, 255)); 
layer1-&gt;setContentSize(CCSizeMake(80, 80)); 
layer1-&gt;setPosition(ccp(50,50)); 
addChild(layer1); 

CCLayerGradient* layer2 = CCLayerGradient::create(ccc4(0, 0, 0, 127), ccc4(255, 255, 255, 127)); 
layer2-&gt;setContentSize(CCSizeMake(80, 80)); 
layer2-&gt;setPosition(ccp(100,90)); 
addChild(layer2); 

CCLayerGradient* layer3 = CCLayerGradient::create(); 
layer3-&gt;setContentSize(CCSizeMake(80, 80)); 
layer3-&gt;setPosition(ccp(150,140)); 
layer3-&gt;setStartColor(ccc3(255, 0, 0)); 
layer3-&gt;setEndColor(ccc3(255, 0, 255)); 
layer3-&gt;setStartOpacity(255); 
layer3-&gt;setEndOpacity(255); 
ccBlendFunc blend; 
blend.src = GL_SRC_ALPHA; 
blend.dst = GL_ONE_MINUS_SRC_ALPHA; 
layer3-&gt;setBlendFunc(blend); 
addChild(layer3); 
</code></pre>

<p><img src="http://www.cocos2d-x.org/attachments/download/1657" alt="haha" /></p>

<div style='display:none'>
- See more at: http://www.cocos2d-x.org/projects/cocos2d-x/wiki/Director_Scene_Layer_and_Sprite#sthash.jF0fVw56.dpuf
</div>


<h3>Sprites·精灵</h3>

<div style='display:none'>
A cocos2d&#8217; sprite is like any other computer sprite. It is a 2D image that can be moved, rotated, scaled, animated, etc.
</div>


<p>cocos2d的精灵看起来和其他计算机精灵一样。它是2D图像，可以移动，旋转，缩放，动画，等等</p>

<div style='display:none'>
Sprites (implemented using the CCSprite class) can have other sprites as children. When a parent is transformed, all its children are transformed as well.
</div>


<p>Sprites（通过使用CCSprite类实现）可以有多个其他精灵作为子对象，当父类被触发，它的所有子对象也同时被触发。</p>

<div style='display:none'>
Since sprites are subclass of CCNode, they can be transformed manually or by using actions. See Actions for more detail about actions.
</div>


<p>由于精灵都是CCNode的子类，所以可以手动或者通过actions方式来改变它们，详见actions部分。</p>

<h3>References·参考</h3>

<p>cocos2d for iPhone:</p>

<h3>Comment</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[便签做原型设计，要能往小了想]]></title>
    <link href="http://shiren1118.github.com/blog/2013/02/27/bian-qian-zuo-yuan-xing-she-ji-yao-neng-wang-xiao-liao-xiang/"/>
    <updated>2013-02-27T23:14:00+08:00</updated>
    <id>http://shiren1118.github.com/blog/2013/02/27/bian-qian-zuo-yuan-xing-she-ji-yao-neng-wang-xiao-liao-xiang</id>
    <content type="html"><![CDATA[<p>中午坐车，随手拾起便签，设计我的项目：</p>

<ul>
<li>分功能，每个功能1页面</li>
<li>每个功能列出最多6项小列表</li>
<li>每一步都有仔细，不然纸就不够用了</li>
</ul>


<p>我们做项目的时候是假设有无限扩展的，只是想增加功能，而不是考虑成本或局限。我的偶得是给自己假定一个局限（这里是便签，以后可以考虑成时间，财力，人员，市场、、、），在局限中完成才是最实际的。</p>

<p>如果一个月做不完的项目就放弃吧！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自省录1，2，3]]></title>
    <link href="http://shiren1118.github.com/blog/2013/02/25/zi-sheng-23/"/>
    <updated>2013-02-25T23:47:00+08:00</updated>
    <id>http://shiren1118.github.com/blog/2013/02/25/zi-sheng-23</id>
    <content type="html"><![CDATA[<h1>读后感</h1>

<p>看《简笔画技法图谱》一书，简笔画是老少皆宜的东西，我从中看出来的所有事物都是一样，想做好，就要分析，观察，做草图，再细化。</p>

<p>与《精益创业》无差异</p>

<h1>付费的人群归类</h1>

<p> 付费的人群归类</p>

<p> -> 发烧友，小孩，女人，别人，良心</p>

<ul>
<li><p>对于一些人，如90后，富二代中的各种极品来说，我归类为发烧友，其有冲动好玩阔绰炫富享乐的成分，只要他们敢兴趣就会付费</p></li>
<li><p>小孩，国人父母都溺爱孩子，大部分自己省吃俭用，但对待孩子的教育却大方的很。</p></li>
<li><p>女人，一个伤不起的群体，爱美是天性，25岁之后又为美而担心，于是乎手笔很大。</p></li>
<li><p>礼下于别人，国人很令人不解的一点是，自己可以省吃俭用，对朋友，长辈，亲人，上级却可以大手大脚。礼是付费的一个大头，游戏早有此模式</p></li>
<li><p>良心，若不重视知识产品，版权，谁也没办法啊</p></li>
</ul>


<p>总结一句话，凡事还是要带给人价值，才是产品的真正价值。</p>

<h1>红海和蓝海</h1>

<p>做前无古人的事是需要勇气的
直面竞争也需要勇气</p>

<p>以前我觉得创造更容易成功</p>

<p>现在我觉得都一样，成功是件很复杂的事情</p>

<p>一个人应该善于面对竞争，竞争不是件坏事，说的俗点，没有对手你超谁去啊？没有对手就没有回档凌绝顶的感觉。
于竞争中发展，并找到机遇，这就是创新，一个良好的循环必然要以此长存。</p>

<p>学管理的时候学企业的生命周期，其寿命长度，我觉得是如此道理。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby20周年聚会归来]]></title>
    <link href="http://shiren1118.github.com/blog/2013/02/25/ruby20zhou-nian-ju-hui-gui-lai/"/>
    <updated>2013-02-25T23:38:00+08:00</updated>
    <id>http://shiren1118.github.com/blog/2013/02/25/ruby20zhou-nian-ju-hui-gui-lai</id>
    <content type="html"><![CDATA[<p>ruby20年生日回来，最大的收获是听peter讲创业
我把我的想法和peter说了，他觉得很好，给出了几点建议</p>

<ul>
<li>确定是否有足够的热情，是否可以10年如一日的坚持下去</li>
<li>不要一个人战斗</li>
<li>开源非常好，与商业不冲突</li>
</ul>


<p>真是听君一席话，胜读好几年书啊。我最近2年看了很多创业相关的书，但大部分都是教你怎么创业，如何想好的点子，如何经营，如何拿投资而已</p>

<p>成功并不是偶然的，坚持下去，找到自己喜欢的方向，这就足够了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails 插件 ancestry用法]]></title>
    <link href="http://shiren1118.github.com/blog/2013/02/20/rails-cha-jian-ancestryyong-fa/"/>
    <updated>2013-02-20T17:31:00+08:00</updated>
    <id>http://shiren1118.github.com/blog/2013/02/20/rails-cha-jian-ancestryyong-fa</id>
    <content type="html"><![CDATA[<p>简单总结一下用法 是对1.3版本做的</p>

<h1>第一步增加gem</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;ancestry&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>第二步对模型增加ancestry:string字段</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span>
</span><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">migration</span> <span class="n">add_ancestry_to_messages</span> <span class="ss">ancestry</span><span class="p">:</span><span class="n">string</span>
</span><span class='line'><span class="n">rake</span> <span class="ss">db</span><span class="p">:</span><span class="n">migrate</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改migration.rb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AddAncestryToMessages</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">up</span>
</span><span class='line'>    <span class="n">add_column</span> <span class="ss">:messages</span><span class="p">,</span> <span class="ss">:ancestry</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>    <span class="n">add_index</span> <span class="ss">:messages</span><span class="p">,</span> <span class="ss">:ancestry</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">down</span>
</span><span class='line'>    <span class="n">remove_index</span> <span class="ss">:messages</span><span class="p">,</span> <span class="ss">:ancestry</span>
</span><span class='line'>    <span class="n">remove_column</span> <span class="ss">:messages</span><span class="p">,</span> <span class="ss">:ancestry</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>第三步修改model</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Category</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:desc</span><span class="p">,</span> <span class="ss">:name</span> <span class="p">,</span><span class="ss">:parent</span>
</span><span class='line'>  <span class="n">has_ancestry</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：增加:parent和has_ancestry
这步是别的教程里没有强调的</p>

<h1>第四步 测试</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;test_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">CategoryTest</span> <span class="o">&lt;</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:TestCase</span>
</span><span class='line'>  <span class="c1"># test &quot;the truth&quot; do</span>
</span><span class='line'>  <span class="c1">#   assert true</span>
</span><span class='line'>  <span class="c1"># end</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">test</span> <span class="s2">&quot;dump category&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@b</span> <span class="o">=</span> <span class="no">Category</span><span class="o">.</span><span class="n">create!</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s1">&#39;bbbbb&#39;</span><span class="p">,</span> <span class="ss">:parent</span> <span class="o">=&gt;</span> <span class="no">Category</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s1">&#39;aaaaaaaaa&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@d</span> <span class="o">=</span> <span class="no">Category</span><span class="o">.</span><span class="n">create!</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s1">&#39;dddddddd&#39;</span><span class="p">,</span> <span class="ss">:parent</span> <span class="o">=&gt;</span> <span class="vi">@b</span>
</span><span class='line'>    <span class="vi">@e</span> <span class="o">=</span> <span class="no">Category</span><span class="o">.</span><span class="n">create!</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s1">&#39;eeeeeee&#39;</span><span class="p">,</span> <span class="ss">:parent</span> <span class="o">=&gt;</span> <span class="vi">@d</span>
</span><span class='line'>    <span class="vi">@c</span> <span class="o">=</span> <span class="no">Category</span><span class="o">.</span><span class="n">find_by_name</span> <span class="s1">&#39;bbbbb&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># ap @d</span>
</span><span class='line'>    <span class="c1"># ap @d.parent</span>
</span><span class='line'>    <span class="c1"># ap @d.root</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ap</span> <span class="vi">@d</span><span class="o">.</span><span class="n">subtree_ids</span>
</span><span class='line'>    <span class="c1"># ap @c.parent</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># parent           Returns the parent of the record, nil for a root node</span>
</span><span class='line'>    <span class="c1"># parent_id        Returns the id of the parent of the record, nil for a root node</span>
</span><span class='line'>    <span class="c1"># root             Returns the root of the tree the record is in, self for a root node</span>
</span><span class='line'>    <span class="c1"># root_id          Returns the id of the root of the tree the record is in</span>
</span><span class='line'>    <span class="c1"># is_root?         Returns true if the record is a root node, false otherwise</span>
</span><span class='line'>    <span class="c1"># ancestor_ids     Returns a list of ancestor ids, starting with the root id and ending with the parent id</span>
</span><span class='line'>    <span class="c1"># ancestors        Scopes the model on ancestors of the record</span>
</span><span class='line'>    <span class="c1"># path_ids         Returns a list the path ids, starting with the root id and ending with the node&#39;s own id</span>
</span><span class='line'>    <span class="c1"># path             Scopes model on path records of the record</span>
</span><span class='line'>    <span class="c1"># children         Scopes the model on children of the record</span>
</span><span class='line'>    <span class="c1"># child_ids        Returns a list of child ids</span>
</span><span class='line'>    <span class="c1"># has_children?    Returns true if the record has any children, false otherwise</span>
</span><span class='line'>    <span class="c1"># is_childless?    Returns true is the record has no childen, false otherwise</span>
</span><span class='line'>    <span class="c1"># siblings         Scopes the model on siblings of the record, the record itself is included</span>
</span><span class='line'>    <span class="c1"># sibling_ids      Returns a list of sibling ids</span>
</span><span class='line'>    <span class="c1"># has_siblings?    Returns true if the record&#39;s parent has more than one child</span>
</span><span class='line'>    <span class="c1"># is_only_child?   Returns true if the record is the only child of its parent</span>
</span><span class='line'>    <span class="c1"># descendants      Scopes the model on direct and indirect children of the record</span>
</span><span class='line'>    <span class="c1"># descendant_ids   Returns a list of a descendant ids</span>
</span><span class='line'>    <span class="c1"># subtree          Scopes the model on descendants and itself</span>
</span><span class='line'>    <span class="c1"># subtree_ids      Returns a list of all ids in the record&#39;s subtree</span>
</span><span class='line'>    <span class="c1"># depth            Return the depth of the node, root nodes are at depth 0</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>说明:ap是awesome_print</p>

<p>在rails console中执行</p>

<blockquote><p>rake test</p></blockquote>

<p>需要什么方法尽可在官方的文档里找，整体看还比较完善</p>

<h1>参考地址</h1>

<ul>
<li>https://github.com/stefankroes/ancestry</li>
<li>http://railscasts.com/episodes/262-trees-with-ancestry</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[随想]]></title>
    <link href="http://shiren1118.github.com/blog/2013/02/19/sui-xiang/"/>
    <updated>2013-02-19T23:41:00+08:00</updated>
    <id>http://shiren1118.github.com/blog/2013/02/19/sui-xiang</id>
    <content type="html"><![CDATA[<p>智利经济学家曼弗雷德·麦克斯-尼夫（Manfred Max-Neef）和他的同事们在他们1987出版的 “人类规模发展”一书中指出，人的基本需求可归为生存，安全，感情，理解，参与，休闲，创意，人格和自由九类。每一类又可按其状况（质量），获取（物质），操作（行动）及互动（环境）分项而形成36个单元。</p>

<ul>
<li>生存：创造，健康，食物，住所，技能，工作，反馈</li>
<li>保护：安全，社会</li>
<li>感情：友谊，家庭，爱</li>
<li>认识：好奇心，教育</li>
<li>参与：责任，相互交往，社会活动</li>
<li>休闲：玩耍，幻想，性，隐私</li>
<li>创造：技能，工作，反馈</li>
<li>身份：财产，团体，认可</li>
<li>自由：人身自由，权利，异议</li>
</ul>


<p>其实最近1年多，我都是在去想做一些事情，想做的事情很多而做成的事却很少，非我欲望或想法过多，而是年龄长彼事成而心有不甘。</p>

<p>诗歌之美其一是思，其二为幻，当此道，反复锤炼方有成。我去年很少写东西，失去了很多可以胡思乱想的机会，现在想想真是有些不该，假设每天都花上15分钟胡乱的想想，是浪费时间呢，还是算休息？
当一件事情形成习惯，才有威力，而一直奔跑的人看不到风景，于悖论中感到悲哀，生之无奈啊</p>

<p>换个角度，换一个思路，看不一样的书，发呆，洗衣做饭，或者泡一杯好喝的咖啡，这些琐碎的细节无不冲淡了一些本该有的节奏。曲子要不同调，饭菜要有咸淡之分。</p>

<p>近日读书《番茄工作法》，其核心在于每25分钟做一次休息，在一个番茄钟内尽力工作，完成之后必定休息5到10分钟，一定不做与工作相关的事情。其核心仍是俗的不能再俗的“可持续发展”。</p>

<p>《the lean startup》一书将从最小的可用原型开始，《敏捷武士》一书将需求切分为user story，其粒度可以尽量细，是不是一个番茄钟25分钟呢？此为戏言，但这些东西若组合到一起，相信对未来的工作方式是有一定改进的。</p>

<p>人生在勤，不索何获，路慢慢其修远兮！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[无处不在的pry]]></title>
    <link href="http://shiren1118.github.com/blog/2013/02/16/wu-chu-bu-zai-de-pry/"/>
    <updated>2013-02-16T23:45:00+08:00</updated>
    <id>http://shiren1118.github.com/blog/2013/02/16/wu-chu-bu-zai-de-pry</id>
    <content type="html"><![CDATA[<p>http://lucapette.com/pry/pry-everywhere/</p>

<h1>Pry Everywhere</h1>

<p>about a year ago in pry
I have to confess that I’m generally skeptical about alternatives for tools that work so fine like IRB. And I really like IRB. So why Pry? And why everywhere? Because Pry features blew my mind.
When I wrote about IRB customization, I was doing what I always do when I like a tool: customize it in order to feel the tools more familiar with my way of thinking. So, when I run into Pry, some of its features blew my mind because they were exactly what I really would like to have in IRB.
For example, sometimes you would like to explore a class or an object quickly. The way you can do it with Pry feels just natural. It just seems the right way too do it:</p>

<pre><code>1.9.2 (main):0 &gt; cd Array
1.9.2 (Array):1 &gt; ls -m
[:[], :allocate, :new, :superclass, :toy, :try_convert, :yaml_tag]
1.9.2 (Array):1 &gt; show-
show-command  show-doc      show-input    show-method   show-source
1.9.2 (Array):1 &gt; show-method toy

From: /home/lucapette/.pryrc @ line 15:
Number of lines: 3

def self.toy(n=10, &amp;block)
  block_given? ? Array.new(n,&amp;block) : Array.new(n) {|i| i+1}
end
</code></pre>

<p>Toy is a little method I have in my .pryrc (and previously in my .irbrc) that I use when I want to play with arrays. Pry comes with wonderful commands like cd that operates both with classes and instance objects or like ls that you can use to list all the class methods (-m option) or instance methods (-M option). And a very long list of other terrific features as editor integration, shell integration or gist integration. But I don’t need to persuade you to use Pry because I’m sure you will use it after taking a look at these wonderful resources.</p>

<p>So the title of this post is “Pry everywhere” and now I’m going to show you quickly what I’ve done to migrate to Pry. There are a lot of solutions about this topic but all of them involve something I don’t like especially about rails integration. My requirements were fairly simple:</p>

<ul>
<li>I don’t want to lose the customizations I’ve done with IRB</li>
<li>The same for rails console</li>
<li>I don’t want to add any gem (although this is very nicely done) to my Gemfile in rails projects.</li>
</ul>


<p>After a bit of researching, I came up with the following solution:</p>

<p>My current .irbrc:</p>

<pre><code># https://github.com/carlhuda/bundler/issues/183#issuecomment-1149953
if defined?(::Bundler)
  global_gemset = ENV['GEM_PATH'].split(':').grep(/ruby.*@global/).first
  if global_gemset
    all_global_gem_paths = Dir.glob("#{global_gemset}/gems/*")
    all_global_gem_paths.each do |p|
      gem_path = "#{p}/lib"
      $LOAD_PATH &lt;&lt; gem_path
    end
  end
end
# Use Pry everywhere
require "rubygems"
require 'pry'
Pry.start
exit
</code></pre>

<p>Pratically, everytime I start IRB I will start a Pry session. It feels like a dirty solutions and I have to confess I don’t know if it has any issues. For now, it’s working just fine with my requirements. The bundler code is necessary to require pry and other gems from rvm global gemset in a rails console without declaring them in the Gemfile. Then, in the .pryrc I have:</p>

<figure class='code'><figcaption><span>code in .pryrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># vim FTW</span>
</span><span class='line'><span class="no">Pry</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">editor</span> <span class="o">=</span> <span class="s2">&quot;gvim --nofork&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># My pry is polite</span>
</span><span class='line'><span class="no">Pry</span><span class="o">.</span><span class="n">hooks</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:after_session</span> <span class="o">=&gt;</span> <span class="nb">proc</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;bye-bye&quot;</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Prompt with ruby version</span>
</span><span class='line'><span class="no">Pry</span><span class="o">.</span><span class="n">prompt</span> <span class="o">=</span> <span class="o">[</span><span class="nb">proc</span> <span class="p">{</span> <span class="o">|</span><span class="n">obj</span><span class="p">,</span> <span class="n">nest_level</span><span class="o">|</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">RUBY_VERSION</span><span class="si">}</span><span class="s2"> (</span><span class="si">#{</span><span class="n">obj</span><span class="si">}</span><span class="s2">):</span><span class="si">#{</span><span class="n">nest_level</span><span class="si">}</span><span class="s2"> &gt; &quot;</span> <span class="p">},</span> <span class="nb">proc</span> <span class="p">{</span> <span class="o">|</span><span class="n">obj</span><span class="p">,</span> <span class="n">nest_level</span><span class="o">|</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">RUBY_VERSION</span><span class="si">}</span><span class="s2"> (</span><span class="si">#{</span><span class="n">obj</span><span class="si">}</span><span class="s2">):</span><span class="si">#{</span><span class="n">nest_level</span><span class="si">}</span><span class="s2"> * &quot;</span> <span class="p">}</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="sx">%w{map_by_method hirb}</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">gem</span><span class="o">|</span> <span class="nb">require</span> <span class="n">gem</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Toys methods</span>
</span><span class='line'><span class="c1"># Stealed from https://gist.github.com/807492</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Array</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">toy</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">block_given?</span> <span class="p">?</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span> <span class="p">:</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Hash</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">toy</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Hash</span><span class="o">[</span><span class="nb">Array</span><span class="o">.</span><span class="n">toy</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="o">.</span><span class="n">zip</span><span class="p">(</span><span class="nb">Array</span><span class="o">.</span><span class="n">toy</span><span class="p">(</span><span class="n">n</span><span class="p">){</span><span class="o">|</span><span class="n">c</span><span class="o">|</span> <span class="p">(</span><span class="mi">96</span><span class="o">+</span><span class="p">(</span><span class="n">c</span><span class="o">+</span><span class="mi">1</span><span class="p">))</span><span class="o">.</span><span class="n">chr</span><span class="p">})</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># loading rails configuration if it is running as a rails console</span>
</span><span class='line'><span class="nb">load</span> <span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;/.railsrc&#39;</span> <span class="k">if</span> <span class="n">defined?</span><span class="p">(</span><span class="no">Rails</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="no">Rails</span><span class="o">.</span><span class="n">env</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you compare this file with my previous .irbrc you’ll notice that this one is shorter. This means that Pry is doing a piece of the job I would like to have by default, like colors and history commands. My .railsrc is very similar to the previous one but it has a different that could interest you if you are an hirb user:</p>

<pre><code># https://github.com/cldwalker/hirb/issues/46#issuecomment-1870823
Pry.config.print = proc do |output, value|
  Hirb::View.view_or_page_output(value) || Pry::DEFAULT_PRINT.call(output, value)
end

Hirb.enable
</code></pre>

<p>In this way, Hirb is working flawlessly. And the combination of Rails and Pry is just fantastic. Give it a try. I have been able to migrate to Pry with a fair effort, hoping this kind of configuration can help you too!</p>
]]></content>
  </entry>
  
</feed>
