<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[sang' Blog]]></title>
  <link href="http://shiren1118.github.com/atom.xml" rel="self"/>
  <link href="http://shiren1118.github.com/"/>
  <updated>2013-02-20T00:25:26+08:00</updated>
  <id>http://shiren1118.github.com/</id>
  <author>
    <name><![CDATA[alfred]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[随想]]></title>
    <link href="http://shiren1118.github.com/blog/2013/02/19/sui-xiang/"/>
    <updated>2013-02-19T23:41:00+08:00</updated>
    <id>http://shiren1118.github.com/blog/2013/02/19/sui-xiang</id>
    <content type="html"><![CDATA[<p>智利经济学家曼弗雷德·麦克斯-尼夫（Manfred Max-Neef）和他的同事们在他们1987出版的 “人类规模发展”一书中指出，人的基本需求可归为生存，安全，感情，理解，参与，休闲，创意，人格和自由九类。每一类又可按其状况（质量），获取（物质），操作（行动）及互动（环境）分项而形成36个单元。</p>

<p>生存：创造，健康，食物，住所，技能，工作，反馈
保护：安全，社会
感情：友谊，家庭，爱
认识：好奇心，教育
参与：责任，相互交往，社会活动
休闲：玩耍，幻想，性，隐私
创造：技能，工作，反馈
身份：财产，团体，认可
自由：人身自由，权利，异议</p>

<p>其实最近1年多，我都是在去想做一些事情，想做的事情很多而做成的事却很少，非我欲望或想法过多，而是年龄长彼事成而心有不甘。</p>

<p>诗歌之美其一是思，其二为幻，当此道，反复锤炼方有成。我去年很少写东西，失去了很多可以胡思乱想的机会，现在想想真是有些不该，假设每天都花上15分钟胡乱的想想，是浪费时间呢，还是算休息？
当一件事情形成习惯，才有威力，而一直奔跑的人看不到风景，于悖论中感到悲哀，生之无奈啊</p>

<p>换个角度，换一个思路，看不一样的书，发呆，洗衣做饭，或者泡一杯好喝的咖啡，这些琐碎的细节无不冲淡了一些本该有的节奏。曲子要不同调，饭菜要有咸淡之分。</p>

<p>近日读书《番茄工作法》，其核心在于每25分钟做一次休息，在一个番茄钟内尽力工作，完成之后必定休息5到10分钟，一定不做与工作相关的事情。其核心仍是俗的不能再俗的“可持续发展”。</p>

<p>《the lean startup》一书将从最小的可用原型开始，《敏捷武士》一书将需求切分为user story，其粒度可以尽量细，是不是一个番茄钟25分钟呢？此为戏言，但这些东西若组合到一起，相信对未来的工作方式是有一定改进的。</p>

<p>人生在勤，不索何获，路慢慢其修远兮！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[无处不在的pry]]></title>
    <link href="http://shiren1118.github.com/blog/2013/02/16/wu-chu-bu-zai-de-pry/"/>
    <updated>2013-02-16T23:45:00+08:00</updated>
    <id>http://shiren1118.github.com/blog/2013/02/16/wu-chu-bu-zai-de-pry</id>
    <content type="html"><![CDATA[<p>http://lucapette.com/pry/pry-everywhere/</p>

<h1>Pry Everywhere</h1>

<p>about a year ago in pry
I have to confess that I’m generally skeptical about alternatives for tools that work so fine like IRB. And I really like IRB. So why Pry? And why everywhere? Because Pry features blew my mind.
When I wrote about IRB customization, I was doing what I always do when I like a tool: customize it in order to feel the tools more familiar with my way of thinking. So, when I run into Pry, some of its features blew my mind because they were exactly what I really would like to have in IRB.
For example, sometimes you would like to explore a class or an object quickly. The way you can do it with Pry feels just natural. It just seems the right way too do it:</p>

<pre><code>1.9.2 (main):0 &gt; cd Array
1.9.2 (Array):1 &gt; ls -m
[:[], :allocate, :new, :superclass, :toy, :try_convert, :yaml_tag]
1.9.2 (Array):1 &gt; show-
show-command  show-doc      show-input    show-method   show-source
1.9.2 (Array):1 &gt; show-method toy

From: /home/lucapette/.pryrc @ line 15:
Number of lines: 3

def self.toy(n=10, &amp;block)
  block_given? ? Array.new(n,&amp;block) : Array.new(n) {|i| i+1}
end
</code></pre>

<p>Toy is a little method I have in my .pryrc (and previously in my .irbrc) that I use when I want to play with arrays. Pry comes with wonderful commands like cd that operates both with classes and instance objects or like ls that you can use to list all the class methods (-m option) or instance methods (-M option). And a very long list of other terrific features as editor integration, shell integration or gist integration. But I don’t need to persuade you to use Pry because I’m sure you will use it after taking a look at these wonderful resources.</p>

<p>So the title of this post is “Pry everywhere” and now I’m going to show you quickly what I’ve done to migrate to Pry. There are a lot of solutions about this topic but all of them involve something I don’t like especially about rails integration. My requirements were fairly simple:</p>

<ul>
<li>I don’t want to lose the customizations I’ve done with IRB</li>
<li>The same for rails console</li>
<li>I don’t want to add any gem (although this is very nicely done) to my Gemfile in rails projects.</li>
</ul>


<p>After a bit of researching, I came up with the following solution:</p>

<p>My current .irbrc:</p>

<pre><code># https://github.com/carlhuda/bundler/issues/183#issuecomment-1149953
if defined?(::Bundler)
  global_gemset = ENV['GEM_PATH'].split(':').grep(/ruby.*@global/).first
  if global_gemset
    all_global_gem_paths = Dir.glob("#{global_gemset}/gems/*")
    all_global_gem_paths.each do |p|
      gem_path = "#{p}/lib"
      $LOAD_PATH &lt;&lt; gem_path
    end
  end
end
# Use Pry everywhere
require "rubygems"
require 'pry'
Pry.start
exit
</code></pre>

<p>Pratically, everytime I start IRB I will start a Pry session. It feels like a dirty solutions and I have to confess I don’t know if it has any issues. For now, it’s working just fine with my requirements. The bundler code is necessary to require pry and other gems from rvm global gemset in a rails console without declaring them in the Gemfile. Then, in the .pryrc I have:</p>

<figure class='code'><figcaption><span>code in .pryrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># vim FTW</span>
</span><span class='line'><span class="no">Pry</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">editor</span> <span class="o">=</span> <span class="s2">&quot;gvim --nofork&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># My pry is polite</span>
</span><span class='line'><span class="no">Pry</span><span class="o">.</span><span class="n">hooks</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:after_session</span> <span class="o">=&gt;</span> <span class="nb">proc</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;bye-bye&quot;</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Prompt with ruby version</span>
</span><span class='line'><span class="no">Pry</span><span class="o">.</span><span class="n">prompt</span> <span class="o">=</span> <span class="o">[</span><span class="nb">proc</span> <span class="p">{</span> <span class="o">|</span><span class="n">obj</span><span class="p">,</span> <span class="n">nest_level</span><span class="o">|</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">RUBY_VERSION</span><span class="si">}</span><span class="s2"> (</span><span class="si">#{</span><span class="n">obj</span><span class="si">}</span><span class="s2">):</span><span class="si">#{</span><span class="n">nest_level</span><span class="si">}</span><span class="s2"> &gt; &quot;</span> <span class="p">},</span> <span class="nb">proc</span> <span class="p">{</span> <span class="o">|</span><span class="n">obj</span><span class="p">,</span> <span class="n">nest_level</span><span class="o">|</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">RUBY_VERSION</span><span class="si">}</span><span class="s2"> (</span><span class="si">#{</span><span class="n">obj</span><span class="si">}</span><span class="s2">):</span><span class="si">#{</span><span class="n">nest_level</span><span class="si">}</span><span class="s2"> * &quot;</span> <span class="p">}</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="sx">%w{map_by_method hirb}</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">gem</span><span class="o">|</span> <span class="nb">require</span> <span class="n">gem</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Toys methods</span>
</span><span class='line'><span class="c1"># Stealed from https://gist.github.com/807492</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Array</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">toy</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">block_given?</span> <span class="p">?</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span> <span class="p">:</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Hash</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">toy</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Hash</span><span class="o">[</span><span class="nb">Array</span><span class="o">.</span><span class="n">toy</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="o">.</span><span class="n">zip</span><span class="p">(</span><span class="nb">Array</span><span class="o">.</span><span class="n">toy</span><span class="p">(</span><span class="n">n</span><span class="p">){</span><span class="o">|</span><span class="n">c</span><span class="o">|</span> <span class="p">(</span><span class="mi">96</span><span class="o">+</span><span class="p">(</span><span class="n">c</span><span class="o">+</span><span class="mi">1</span><span class="p">))</span><span class="o">.</span><span class="n">chr</span><span class="p">})</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># loading rails configuration if it is running as a rails console</span>
</span><span class='line'><span class="nb">load</span> <span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;/.railsrc&#39;</span> <span class="k">if</span> <span class="n">defined?</span><span class="p">(</span><span class="no">Rails</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="no">Rails</span><span class="o">.</span><span class="n">env</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you compare this file with my previous .irbrc you’ll notice that this one is shorter. This means that Pry is doing a piece of the job I would like to have by default, like colors and history commands. My .railsrc is very similar to the previous one but it has a different that could interest you if you are an hirb user:</p>

<pre><code># https://github.com/cldwalker/hirb/issues/46#issuecomment-1870823
Pry.config.print = proc do |output, value|
  Hirb::View.view_or_page_output(value) || Pry::DEFAULT_PRINT.call(output, value)
end

Hirb.enable
</code></pre>

<p>In this way, Hirb is working flawlessly. And the combination of Rails and Pry is just fantastic. Give it a try. I have been able to migrate to Pry with a fair effort, hoping this kind of configuration can help you too!</p>
]]></content>
  </entry>
  
</feed>
